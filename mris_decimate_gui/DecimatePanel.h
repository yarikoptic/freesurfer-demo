/*
 * Original Author: Dan Ginsburg (@ Children's Hospital Boston)
 * CVS Revision Info:
 *    $Author: nicks $
 *    $Date: 2010/12/08 17:26:31 $
 *    $Revision: 1.3.2.2 $
 *
 * Copyright (C) 2010,
 * The General Hospital Corporation (Boston, MA).
 * All rights reserved.
 *
 * Distribution, usage and copying of this software is covered under the
 * terms found in the License Agreement file named 'COPYING' found in the
 * FreeSurfer source code root directory, and duplicated here:
 * https://surfer.nmr.mgh.harvard.edu/fswiki/FreeSurferOpenSourceLicense
 *
 * General inquiries: freesurfer@nmr.mgh.harvard.edu
 * Bug reports: analysis-bugs@nmr.mgh.harvard.edu
 *
 */

#ifndef __DecimatePanel__
#define __DecimatePanel__

/**
@file
Subclass of DecimatePanelBase, which is generated by wxFormBuilder.
*/

#include "DecimatePanelBase.h"

extern "C"
{
#include "mrisurf.h"
#include "utils.h"
}

#include "mris_decimate.h"

class RenderPanel;

/** Implementing DecimatePanelBase */
class DecimatePanel : public DecimatePanelBase
{
public:
    /** Constructor */
    DecimatePanel( wxWindow* parent, RenderPanel *renderPanel );


    int SaveDecimatedSurface(const char* filePath);
    void SetOrigSurface(MRI_SURFACE *origSurface);
    void SetLastSaveDir(wxString *lastSaveDir);
    void SetCurvatureType(int type);


    void ResetToDefault();
    DECIMATION_OPTIONS GetDecimationOptions() const;
    void DoDecimate();
    void UpdateDecimationLevel(float val);
    bool UpdateCurvature( const wxString& curvature );

    ///
    /// Update the camera parameters from the current camera location
    ///
    void UpdateCameraInfo();

protected:
    typedef enum
    {
        e_None                = 0,
        e_Gaussian            = 1,    // Gaussian curvature   = k1*k2
        e_Mean                = 2,    // Mean curvature       = 0.5*(k1+k2))
        e_K1                  = 3,    // k1 curvature
        e_K2                  = 4,    // k2 curvature
        e_S                   = 5,    // "sharpness"          = (k1-k2)^2
        e_C                   = 6,    // "curvedness"         = sqrt(0.5*(k1^2+k2^2))
        e_SI                  = 7,    // "shape index"        = atan((k1+k2)/(k2-k1))
        e_BE                  = 8,    // "bending energy"     = k1^2 + k2^2
        e_FI                  = 9,   // Folding Index

        e_numCurvTypes
    } e_secondOrderType;

    void SetDecimationLevel(float val);
    void SetMinimumAngle(float val);
    void SetMinValue(float val);
    void SetMaxValue(float val);

    // Handlers for DecimatePanelBase events.
    void OnDecimationLevelChanged( wxScrollEvent& event );
    void OnDecimationText( wxCommandEvent& event );
    void OnMinimumAngleChanged( wxScrollEvent& event );
    void OnMinimumAngleText( wxCommandEvent& event );
    void OnMinimumValueChanged( wxScrollEvent& event );
    void OnMinimumValueText( wxCommandEvent& event );
    void OnMaximumValueChanged( wxScrollEvent& event );
    void OnMaximumValueText( wxCommandEvent& event );
    void OnCurvatureChoice( wxCommandEvent& event );
    void OnApplyButtonClick( wxCommandEvent& event );
    void OnDefaultButtonClick( wxCommandEvent& event );
    void OnRenderModeChoice( wxCommandEvent& event );
    void OnSaveCurvatureClick( wxCommandEvent& event );
    void OnHistogramCheckBox( wxCommandEvent& event );
    void OnColorBarCheckBox( wxCommandEvent& event );
    void OnUpVectorText( wxCommandEvent& event );
    void OnCameraPositionText( wxCommandEvent& event );
    void OnFocalPointText( wxCommandEvent& event );
    void OnSetCameraClick( wxCommandEvent& event );
    void OnResetCameraClick( wxCommandEvent& event );
    void OnSaveScreenshotClick( wxCommandEvent& event );

    ///
    /// Given an input text string such as (1.0 2.0 3.0) convert
    /// the strings to double values
    /// \return True if succesfully converted, false otherwise
    ///
    bool ConvertStringVecToDoubles( const wxString& str, double *vec, int components);

	///
	///	Compute curvature stats (min, max, mean, sigma)
	///
	void ComputeStats(MRI_SURFACE *mris, float& minVal, float& maxVal, float& mean, float& sigma);
	    
protected:
    RenderPanel *m_renderPanel;
    MRI_SURFACE *m_origSurface;
    MRI_SURFACE *m_decimatedSurface;
    wxString m_curvatureTypes[e_numCurvTypes];
    float m_decimationLevel;
    float m_minimumAngle;
    float m_minimumValue;
    float m_maximumValue;
    float m_currentMinValue;
    float m_currentMaxValue;
    wxString *m_lastSaveDir;


};

#endif // __DecimatePanel__

