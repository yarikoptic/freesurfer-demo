# configure.in
# by y.tosa
# June 17, 2004
#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.
#
AC_PREREQ(2.57)
AC_INIT(Freesurfer, 0.1, tosa@nmr.mgh.harvard.edu)
AC_CONFIG_AUX_DIR([config])
# create specifal dir for intermediate files
AC_MSG_NOTICE(Setting System ...)
# set target, build, host etc. 
AC_CANONICAL_SYSTEM
AM_INIT_AUTOMAKE
AC_CONFIG_SRCDIR([config.h.in])
AM_CONFIG_HEADER([config.h])

# Checks for programs.
AC_PROG_AWK
AC_PROG_CXX
AC_PROG_CC_STDC
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_CPP
AC_PROG_LIBTOOL 

# two programs used for compress/decompress files
# cannot make AC_MSG_ERROR work inside the AC_CHECK_PROG so that I took it out.
AC_CHECK_PROG([HAS_ZCAT],[zcat],[1],[])
if test ! "$HAS_ZCAT" = "1"; then
  AC_MSG_ERROR("FATAL: zcat is required in handling mgz etc. Put it in the path.")
fi

AC_CHECK_PROG([HAS_GZIP],[gzip],[1],[])
if test ! "$HAS_GZIP" = "1"; then
  AC_MSG_ERROR("FATAL: gzip is required in creating mgz etc. Put it in the path.")
fi	

##################################################################
# allow user to specify tixwish
AC_ARG_WITH(tixwish,
  [  --with-tixwish=TIXWISH  where you specify the file for tixwish],
  [TIXWISH=$withval],[])
# if TIXWISH has been set, then it does not do anything
AC_PATH_PROG([TIXWISH],[tixwish],[])
if test "x$TIXWISH" = "x"; then
  AC_PATH_PROG([TIXWISH],[tixwish8.1.8.3],[])
  if test "x$TIXWISH" = "x"; then
    AC_PATH_PROG([TIXWISH],[tixwish8.1.8.4],[])
  fi
fi
# well check
if test "x$TIXWISH" = "x"; then
  AC_MSG_ERROR("FATAL: tixwish needed for csurf not found.  Use --with-tixwish=... to specify")
fi
	
AC_SUBST(TIXWISH)

#################################################################
# allow user to enable/disable scuba qt
AC_ARG_ENABLE(scubaqt, [ --enable-scubaqt   Create QT version of scuba],
  [case "${enableval}" in
     yes) scubaqt=true ;;
     no) scubaqt=false ;;
     *) AC_MSG_ERROR(bad value ${enableval} for --enable-scubaqt) ;;
   esac],[scubaqt=false])

AM_CONDITIONAL(WANT_QTSCUBA, test x$scubaqt = xtrue)


################################################################
# define OS
################################################################
# examples are:
# SUSE9.0:   host = x86_64-suse-linux          uname -p: x86_64
# RedHat9.0: host = i686-pc-linux-gnu          uname -p: i686
# MacOSX10 : host = powerpc-apple-darwin6.8    uname -p: powerpc
# powerpc    host = powerpc64-suse-linux       uname -p: unknown
#################################################################
AC_C_BIGENDIAN_CROSS
echo "byte order is " $BYTEORDER
AC_SUBST(BYTEORDER)

AC_MSG_NOTICE(Setting OS from target ...)
case "${target}" in
 i*86-*-linux-gnu*)
 OS=Linux
 OS_CPPFLAGS="-Wall -fwritable-strings"
## choose static version if shared and static present
 OS_LDFLAGS="-all-static"
 DYNAMIC_LIB_EXT=".so"
 SHARED_CFLAGS="-fPIC"
 SHARED_LDFLAGS="-shared"
 ;;
 x86_64-*)
 OS=Linux
 OS_CPPFLAGS="-Wall -fwritable-strings -m64"
 OS_LDFLAGS="-all-static"
 LDFLAGS="-L/usr/X11R6/lib64 -L/usr/lib64 $LDFLAGSA"
 DYNAMIC_LIB_EXT=".so"
 SHARED_CFLAGS="-fPIC"
 SHARED_LDFLAGS="-shared"
 ;; 
 powerpc64-*)
 # not to define Linux
 OS=Linux
 OS_CPPFLAGS="-Wall -fwritable-strings"
 OS_LDFLAGS="-all-static"
 LDFLAGS="-L/usr/X11R6/lib64 -L/usr/lib64 $LDFLAGSA"
 DYNAMIC_LIB_EXT=".so"
 SHARED_CFLAGS="-fPIC"
 SHARED_LDFLAGS="-shared"
 ;; 
 *-apple-darwin*)
 OS=Darwin
 OS_CPPFLAGS=
 OS_LDFLAGS=
 DYNAMIC_LIB_EXT=".dylib"
 SHARED_CFLAGS="-fno-common"
 SHARED_LDFLAGS="-dynamiclib"
 ;;
esac
AC_SUBST(OS)
AC_SUBST(OS_CPPFLAGS)
AC_SUBST(OS_LDFLAGS)
AC_SUBST(DYNAMIC_LIB_EXT)

# export
AC_SUBST(SHARED_CFLAGS)
AC_SUBST(SHARED_LDFLAGS)

AC_MSG_NOTICE(OS is $OS)

##############################################################
# cpu optimization
##############################################################
if test "${CC}" = "gcc"; then
AC_MSG_NOTICE(Setting CPU optimization ...)
CPUFLAGS=""
CPUTYPE="NO"
#### 
#### cpu type: we support 
####     pentium3, pentium4,  
####     athlon-xp, opteron, athlon64, athlon-fx
####      
AC_ARG_WITH(cpu,
  [  --with-cpu=CPUTYPE      where CPUTYPE is pentium3, pentium4, athlon-xp, G4, G5,  ....],
  [CPUTYPE=$withval],[])
# --with-cpu not used  automatically figure out
if test "$CPUTYPE" = "NO"; then
  case "$OS" in
  Darwin)
    maccpu=`machine`
    case "$maccpu" in
      ppc750)
      CPUTYPE=G3
      ;;
      ppc7450)
      CPUTYPE=G4
      ;;
      ppc970)
      CPUTYPE=G5
      ;;
      *)
      CPUTYPE="NO"
      echo "unknown mac cpu $maccpu"
      ;;
      esac
    ;;
  Linux)
    case "${target}" in
    i*86-*-linux-gnu*)	
      cpu386=`./x86cpucaps/cpucaps -m | sed 's/ //g'`
      case "$cpu386" in
        PentiumIII*)
        CPUTYPE=pentium3
        ;;
        Pentium4)
        CPUTYPE=pentium4
        ;;
	PentiumM)
	CPUTYPE=pentium4
	;;
        AMDAthlonXP*)
        CPUTYPE=athlonxp
        ;;
      esac
      ;;
    x86_64-*)
      cpu386=`./x86cpucaps/cpucaps -m | sed 's/ //g'`
      case "$cpu386" in
        AMDAthlon64)
        CPUTYPE=athlon64
        ;;
        AMDOpteron*)
        CPUTYPE=opteron
        ;;
      esac
      ;;
    powerpc64-*)
      CPUTYPE=power4
      ;;
    esac
    ;;
  esac
fi

AC_MSG_NOTICE(CPUTYPE is $CPUTYPE)
AC_MSG_CHECKING(CPU optimization ...)

# now set the flag
case "$CPUTYPE" in 
  pentium3) 
#     CPUFLAGS="-march=pentium3"
     CPUFLAGS=""
     ;;
  pentium4)
#     CPUFLAGS="-march=pentium4"
     CPUFLAGS=""
     ;;
  athlonxp)
#     CPUFLAGS="-march=pentium3"
     CPUFLAGS=""
     ;;	
  opteron)
#     CPUFLAGS="-march=x86-64"
     CPUFLAGS=""
     ;;
  athlon64)
#     CPUFLAGS="-march=x86-64"
     CPUFLAGS=""
     ;;
  athlon-fx)
#     CPUFLAGS="-march=x86-64"
     CPUFLAGS=""
     ;;
  G4)
     CPUFLAGS="-mtune=G4 -mcpu=G4 -faltivec"
     ;;
  G5)
     CPUFLAGS="-mtune=G5 -mcpu=G5 -faltivec"
     ;;
  power4)
     CPUFLAGS="-mtune=power4 -mcpu=power4"
     ;;
  power5)
     CPUFLAGS="-mtune=power5 -mcpu=power5"
     ;;
  *)
     echo "cpu optimization not set"
     ;;
esac

found=$CPUFLAGS 
# set the value

AC_MSG_RESULT($found)
# verify the flag work (need to make this as macro)
###############################################################
ac_save_CFLAGS=$CFLAGS
CFLAGS="$CPUFLAGS $CFLAGS"
echo "$as_me:$LINENO: checking whether $CC accepts $CPUFLAGS" >&5
echo $ECHO_N "checking whether $CC accepts $CPUFLAGS... $ECHO_C" >&6
if test "${ac_cv_prog_cc_cpuflags+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  cat >conftest.$ac_ext <<_ACEOF
#line $LINENO "configure"
/* confdefs.h.  */
_ACEOF
cat confdefs.h >>conftest.$ac_ext
cat >>conftest.$ac_ext <<_ACEOF
/* end confdefs.h.  */

int
main ()
{

  ;
  return 0;
}
_ACEOF
rm -f conftest.$ac_objext
if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
  (eval $ac_compile) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); } &&
         { ac_try='test -s conftest.$ac_objext'
  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
  (eval $ac_try) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); }; }; then
  ac_cv_prog_cc_cpuflags=yes
else
  echo "$as_me: failed program was:" >&5
sed 's/^/| /' conftest.$ac_ext >&5

ac_cv_prog_cc_cpuflags=no
fi
rm -f conftest.$ac_objext conftest.$ac_ext
fi

echo "$as_me:$LINENO: result: $ac_cv_prog_cc_cpuflags" >&5
echo "${ECHO_T}$ac_cv_prog_cc_cpuflags" >&6

if test $ac_cv_prog_cc_cpuflags = no; then
 AC_MSG_NOTICE("gcc on this PC cannot accept $CPUFLAGS.  gcc may be too old?")
 CPUFLAGS=""
fi 
# write the flag file
echo "CPUFLAGS=$CPUFLAGS" > cpuflags.mak

CFLAGS=$ac_save_CFLAGS
CFLAGS="-Wall $CPUFLAGS $CFLAGS"
CXXFLAGS="-Wall $CPUFLAGS $CXXFLAGS"

#####
else
  AC_MSG_NOTICE([cpu optimization not done. you must use gcc.])

# if gcc
fi
##############################################################
# mgh put packages and create softlinks
# default path for mni tools
##############################################################
# get the path for X includes and X libraries
AC_PATH_X
##### Apple is really tricky
##### compiles <X11/Intrinsic.h> without the need for X_CFLAGS
##### However, GL/gl.h in /usr/X11R6/include/GL/gl.h is not automaticlaly found
if test -z "$x_includes"; then
  x_includes=/usr/X11R6/include
  AC_MSG_NOTICE(x_includes set to /usr/X11R6/include.  If not correct, specify using --x-includes=)
fi

ACX_PTHREAD

AC_MSG_NOTICE(Checking directory for MNI, BLT, Tiff and Jpeg)
#mghdir=/usr/pubsw/packages
#############################################################
# MNI
#############################################################
ac_mni_includes=NO 
ac_mni_libraries=NO 
ac_mni_bindir=NO
mni_libraries=""
mni_includes=""
AC_MSG_CHECKING(cheking MNI directory)
# default is to use MGH installation
#if test -d $mghdir/mni/current ; then
#  ac_mni_includes=$mghdir/mni/current/include
#  ac_mni_libraries=$mghdir/mni/current/lib
#  ac_mni_bin=$mghdir/mni/current/bin
#fi
# modify when --with-mni-dir option given
################################################################
AC_ARG_WITH(mni-dir,
  [  --with-mni-dir=DIR      where the root of MNI is installed.],
  [  ac_mni_includes="$withval"/include
     ac_mni_libraries="$withval"/lib
     ac_mni_bindir="$withval"/bin

  ])

# modify CXXFLAGS and LDFLAGS
if test ! "$ac_mni_includes" = "NO"; then
  AC_MSG_RESULT(MNI directory is $withval)	
  mni_includes=-I$ac_mni_includes
  CPPFLAGS="$CPPFLAGS $mni_includes"
else
  AC_MSG_RESULT(MNI directory is not supplied)
fi
if test ! "$ac_mni_libraries" = "NO"; then 
  mni_libraries=-L$ac_mni_libraries 
  LDFLAGS="$LDFLAGS $mni_libraries"
fi

if test ! "$ac_mni_bindir" = "NO"; then 
  mni_bindir=$ac_mni_bindir 
fi

AC_SUBST(mni_bindir)
AC_SUBST(mni_includes)
AC_SUBST(mni_libraries)

################################################################
# BLT
################################################################
ac_blt_includes="NO"
ac_blt_libraries="NO"
ac_blt_bindir="NO"
blt_includes=""
blt_libraries=""
AC_MSG_CHECKING(cheking BLT directory)
# default is to use MGH installation
# MGH installs BLT in tcl directory
#if test -d $mghdir/tcl/current ; then
#  ac_blt_includes=$mghdir/tcl/current/include
#  ac_blt_libraries=$mghdir/tcl/current/lib
#  ac_blt_bindir=$mghdir/tcl/current/bin
#fi

AC_ARG_WITH(BLT-dir,
  [  --with-BLT-dir=DIR      where the root of Blt/Tk is installed.],
  [  ac_blt_includes="$withval"/include
     ac_blt_libraries="$withval"/lib
     ac_blt_bindir="$withval"/bin
  ])

# modify CXXFLAGS and LDFLAGS
if test ! "$ac_blt_includes" = "NO"; then
  AC_MSG_RESULT(BLT directory is $withval)
  blt_includes=-I$ac_blt_includes
  CPPFLAGS="$CPPFLAGS $blt_includes"
else
  AC_MSG_RESULT(BLT dirctory is not supplied)
fi
if test ! "$ac_blt_libraries" = "NO"; then
  blt_libraries=-L$ac_blt_libraries 
  LDFLAGS="$LDFLAGS $blt_libraries"
fi

AC_SUBST(blt_includes)
AC_SUBST(blt_libraries)

################################################################
# tiff   Mac does not have this
################################################################
ac_tiff_includes="NO"
ac_tiff_libraries="NO"
ac_tiff_bindir="NO"
tiff_includes=""
tiff_libraries=""
AC_MSG_CHECKING(cheking Tiff directory)
# default is to use MGH installation
#if test -d $mghdir/tiff/current ; then
#  ac_tiff_includes=$mghdir/tiff/current/include
#  ac_tiff_libraries=$mghdir/tiff/current/lib
#  ac_tiff_bindir=$mghdir/tiff/current/bin
#fi

AC_ARG_WITH(tiff-dir,
  [  --with-tiff-dir=DIR     where the root of Tiff is installed.],
  [  ac_tiff_includes="$withval"/include
     ac_tiff_libraries="$withval"/lib
     ac_tiff_bindir="$withval"/bin
  ])

# modify CXXFLAGS and LDFLAGS
if test ! "$ac_tiff_includes" = "NO"; then
  AC_MSG_RESULT(Tiff directory is $withval)
  tiff_includes=-I$ac_tiff_includes
  CPPFLAGS="$CPPFLAGS $tiff_includes"
else
  AC_MSG_RESULT(Tiff directory is not supplied)
fi
if test ! "$ac_tiff_libraries" = "NO"; then 
  tiff_libraries=-L$ac_tiff_libraries 
  LDFLAGS="$LDFLAGS $tiff_libraries"
fi

################################################################
# jpeg   Mac does not have this
################################################################
ac_jpeg_includes="NO"
ac_jpeg_libraries="NO"
ac_jpeg_bindir="NO"
jpeg_includes=""
jpeg_libraries=""
AC_MSG_CHECKING(cheking Jpeg directory)
# default is to use MGH installation
#if test -d $mghdir/jpeg/current ; then
#  ac_jpeg_includes=$mghdir/jpeg/current/include
#  ac_jpeg_libraries=$mghdir/jpeg/current/lib
#  ac_jpeg_bindir=$mghdir/jpeg/current/bin
#fi

AC_ARG_WITH(jpeg-dir,
  [  --with-jpeg-dir=DIR     where the root of Jpeg is installed.],
  [  ac_jpeg_includes="$withval"/include
     ac_jpeg_libraries="$withval"/lib
     ac_jpeg_bindir="$withval"/bin
  ])

# modify CXXFLAGS and LDFLAGS
if test ! "$ac_jpeg_includes" = "NO"; then
  AC_MSG_RESULT(Jpeg directory is $withval)
  jpeg_includes=-I$ac_jpeg_includes
  CPPFLAGS="$CPPFLAGS $jpeg_includes"
else
  AC_MSG_RESULT(Jpeg directory is not supplied)
fi
if test ! "$ac_jpeg_libraries" = "NO"; then 
  jpeg_libraries=-L$ac_jpeg_libraries 
  LDFLAGS="$LDFLAGS $jpeg_libraries"
fi

# generic mods
CPPFLAGS="$CPPFLAGS -D$OS -DANSI $OS_CPPFLAGS"

AC_MSG_NOTICE(Get OpenGL info ...)
#####################################################
# OpenGL
#####################################################
AX_CHECK_GLUT
#####################################################
# produces GLUT_CFLAGS GLUT_LIBS
LIBS_OPENGL="$GLUT_LIBS"

#####################################################
# Tcl/Tk
####################################################
AC_MSG_NOTICE(checking Tcl/Tk directory)
################# apple
AC_ARG_WITH([apple-tcl-framework],
	    [AC_HELP_STRING([--with-apple-tcl-framework])])
if test "X$with_apple_tcl_framework" = "Xyes"; then
  AC_MSG_ERROR("FATAL:tkmedit/tksurfer needs BLT.  No Aqua verson of BLT exists yet.")
#  AC_MSG_NOTICE([Apple framework way ...])
#  AC_DEFINE([HAVE_APPLE_TCL_FRAMEWORK],[1],
#            [Use the Apple Tcl framework,])
#  TCL_CFLAGS="-framework Tcl -framework Tk"
#  TCL_LIBS="-lTix8.4"
#  tcl_libraries="-L/Library/Tcl/Tix8.4"
#  tcl_includes=""
else
################## other cases
# here are uni*es
  AC_MSG_NOTICE([unix style...])
  ac_tcl_includes="NO"
  ac_tcl_libraries="NO"
  ac_tcl_bindir="NO"
  tcl_includes=""
  tcl_libraries=""

# check for MGH style
# default is to use MGH installation
#  if test -d $mghdir/tcl/current ; then
#    ac_tcl_includes=$mghdir/tcl/current/include
#    ac_tcl_libraries=$mghdir/tcl/current/lib
#    ac_tcl_bindir=$mghdir/tcl/current/bin
#  fi

  AC_ARG_WITH(tcl-dir,
    [  --with-tcl-dir=DIR      where the root of Tcl/Tk is installed.],
    [  ac_tcl_includes="$withval"/include
       ac_tcl_libraries="$withval"/lib
       ac_tcl_bindir="$withval"/bin
    ])

# modify CXXFLAGS and LDFLAGS
  if test ! "$ac_tcl_includes" = "NO"; then
    AC_MSG_RESULT([Tcl directory is $withval])
    tcl_includes=-I$ac_tcl_includes
    CPPFLAGS="$CPPFLAGS $tcl_includes"
  else
    AC_MSG_RESULT([Tcl directory is not supplied])
  fi

  if test ! "$ac_tcl_libraries" = "NO"; then 
    tcl_libraries=-L$ac_tcl_libraries 
  fi

  TCL_CFLAGS="$blt_includes $tcl_includes"
fi
###### end of uni*es

# set tcl_libdir
if test ! tcl_libraries =="NO"; then
   tcl_libdir=`echo $tcl_libraries | sed "s/-L//g"`
else
   tcl_libdir=/usr/lib
fi

AC_SUBST(tcl_libdir)
AC_SUBST(tcl_includes)
AC_SUBST(tcl_libraries)

################################################
LIBDIRS_MGH="utils rgb unix dicom hipsstubs"
AC_SUBST(LIBDIRS_MGH)

# stupid circular dependency on iopen swapInt etc.
LIBS_MGH="utils/libutils.a rgb/librgb.a unix/libunix.a dicom/libdicom.a hipsstubs/libhipsstubs.a log/liblog.a"
AC_SUBST(LIBS_MGH)

#####################################################
# Checks for libraries.
# the order is important
#####################################################
AC_MSG_NOTICE(Making sure that all libraries can be compilable ...)
AC_CHECK_LIB([m], [floor])
AC_CHECK_LIB([z], [gzopen])
AC_CHECK_LIB([crypt], [crypt],[],[echo "MacOSX won't need this"])
AC_CHECK_LIB([tiff], [TIFFGetVersion],[],
  [AC_MSG_ERROR("FATAL:tiff lib not found. Please install tiff header files and libs.")] )
AC_CHECK_LIB([jpeg], [jpeg_start_compress],[],
  [AC_MSG_ERROR("FATAL:jpeg lib not found. Please install jpeg lib.")] )
# three mni libs
AC_CHECK_LIB([netcdf], [nccreate],[],
  [AC_MSG_ERROR("FATAL:netcdf lib not found.  Set LDFLAGS or --with-mni-dir.")] )
AC_CHECK_LIB([minc], [miopen], [],
  [AC_MSG_ERROR("FATAL:minc lib not found.  Set LDFLAGS or --with-mni-dir.")] )
AC_CHECK_LIB([volume_io], [transform_point],[],
  [AC_MSG_ERROR("FATAL:volume_io lib not found.  Set LDFLAGS or --with-mni-dir.")] )
# the entire libs here is passed as LIBS
# thus save the current one
ac_save_libs=$LIBS
ac_save_cppflags=$CPPFLAGS
ac_save_ldflags=$LDFLAGS

# just checking gsl but not set LIBS. wanted to check libgsl which contains the undefed cblas routines
AC_CHECK_LIB([gslcblas], [cblas_dsdot], [],
  [AC_MSG_ERROR("FATAL:gsl lib not found. Please install gsl header files and libs.")] )
LIBS=$ac_save_libs

## check Tcl/Tk/BLT
CPPFLAGS="$CPPFLAGS $TCL_CFLAGS"
LDFLAGS="$LDFLAGS $tcl_libraries"	
################## Tcl
AC_CHECK_LIB([tcl8.4],[Tcl_Init],
  [LIB_TCL=-ltcl8.4],
# check tcl8.3
  [
    AC_CHECK_LIB([tcl8.3],[Tcl_Init],
    [LIB_TCL=-ltcl8.3],
# check tcl
    [ AC_CHECK_LIB([tcl],[Tcl_Init],
      [LIB_TCL=-ltcl],
# check tclstub
      [ AC_CHECK_LIB([tclstub],[Tcl_Init],
        [LIB_TCL=-ltclstub],
        [AC_MSG_ERROR([FATAL: libtcl not found. \
Check config.log. Set LDFLAGS or --with-tcl-dir.])        ] )
      ])
    ])
  ])

#################### Tk  needs X11 (or Aqua)
LIBS="-lX11 $LIBS"
CPPFLAGS="$GLUT_CFLAGS $CPPFLAGS"
LDFLAGS="$X_LIBS $LDFLAGS"
# check tk8.4
AC_CHECK_LIB([tk8.4],[Tk_Init],
  [LIB_TK=-ltk8.4],
# check tk8.3
  [
    AC_CHECK_LIB([tk8.3],[Tk_Init],
    [LIB_TK=-ltk8.3],
# check tk
    [ 
      AC_CHECK_LIB([tk],[Tk_Init],
      [LIB_TK=-ltk],
      [AC_MSG_ERROR([FATAL: libtk not found. \
Check config.log. Set LDFLAGS or --with-tcl-dir.])
      ])
    ])  
  ])

##################### Tix 
AC_CHECK_LIB([tix],[Tix_Init],
  [LIB_TIX=-ltix],
  [
# check tix8.1.8.4
    AC_CHECK_LIB([tix8.1.8.4], [Tix_Init],
    [LIB_TIX=-ltix8.1.8.4],
    [
# check tix8.1.8.3
      AC_CHECK_LIB([tix8.1.8.3], [Tix_Init],
      [LIB_TIX=-ltix8.1.8.3],
      [AC_MSG_ERROR("FATAL: libtix not found. check config.log. set LDFLAGS or --with-tcl-dir.")
      ])
    ])
  ])
# if test "X$with_apple_tcl_framework" = "Xyes"; then
#   AC_CHECK_LIB([Tix8.4],[Tix_Init],[],
#              [AC_MSG_ERROR("FATAL: libTix8.4 not found.")])

##################### BLT (we cannot build BLT in Aqua)   must use X11
LDFLAGS="$LDFLAGS $blt_libraries"
LIBS="$LIB_TK $LIB_TCL $LIBS"
AC_CHECK_LIB([BLT],[Blt_Init],
  [LIB_BLT=-lBLT],
# check BLT.2 (MacOSX)
  [
    AC_CHECK_LIB([BLT.2],[Blt_Init],
    [LIB_BLT=-lBLT.2],
    [
# check BLT24 (Fedora)
      AC_CHECK_LIB([BLT24],[Blt_Init],
      [LIB_BLT=-lBLT24], 
          [AC_MSG_ERROR("FATAL: libBLT not found. check config.log.  Set LDFLAGS or --with-BLT-dir.")
      ])
    ])
  ])

# recover previous one without X and Tcl
LIBS=$ac_save_libs
CPPFLAGS=$ac_save_cppflags
LDFLAGS=$ac_save_ldflags

LDFLAGS_TCL="$blt_libraries $tcl_libraries"
LIBS_TCL="$LIB_BLT $LIB_TIX $LIB_TK $LIB_TCL"
LIBS_TCL_OPENGL="$LIBS_TCL $LIBS_OPENGL"

AC_SUBST(LDFLAGS_TCL)
AC_SUBST(LIBS_TCL)
AC_SUBST(LIBS_TCL_OPENGL)
AC_SUBST(TCL_CFLAGS)

# check whether needs Itcl_Init() and Itk_Init()
# except when using Tcl8.4, which doesn't contain Itcl_Init or Itk_Init
if ! test "$LIB_TCL" = "-ltcl8.4"; then
  AX_TIX_INITCHECK($TCL_CFLAGS, $LDFLAGS_TCL, $LIBS_TCL)
fi

###########################################################################################
# Checks for header files.
############################################################################################
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS([arpa/inet.h fcntl.h float.h limits.h locale.h malloc.h memory.h netdb.h netinet/in.h stddef.h stdlib.h string.h strings.h sys/file.h sys/ioctl.h sys/param.h sys/socket.h sys/time.h sys/timeb.h unistd.h values.h wctype.h])
# the following is needed on darwin
AC_CHECK_HEADERS(sys/types.h stdint.h)

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_TYPE_MODE_T
AC_TYPE_OFF_T
AC_TYPE_SIZE_T
AC_HEADER_TIME
AC_STRUCT_TM
AC_CHECK_TYPES([ptrdiff_t])

# Checks for library functions.
AC_FUNC_CLOSEDIR_VOID
AC_FUNC_ERROR_AT_LINE
AC_FUNC_LSTAT
AC_FUNC_LSTAT_FOLLOWS_SLASHED_SYMLINK
AC_FUNC_MALLOC
AC_FUNC_MMAP
AC_FUNC_SELECT_ARGTYPES
AC_TYPE_SIGNAL
AC_FUNC_STAT
AC_FUNC_STRTOD
AC_FUNC_VPRINTF
# freesurfer uses calloc, getenv often so added
AC_CHECK_FUNCS([bzero calloc floor ftime getenv getcwd getpagesize gettimeofday memmove memset mkdir munmap pow putenv rint select setenv sqrt strcasecmp strchr strdup strerror strncasecmp strrchr strspn strstr strtol uname])

###############################################################################
# output
###############################################################################
DEV=`pwd`
export DEV
./config/removemakefile.sh

AC_OUTPUT(\
Makefile \
unix/Makefile dicom/Makefile rgb/Makefile utils/Makefile hipsstubs/Makefile log/Makefile \
mris2rgb/Makefile nmovie/Makefile mris_show/Makefile tkmedit/Makefile tkregister/Makefile \
tkregister2/Makefile tksurfer/Makefile \
check_siemens_dir/Makefile repair_siemens_file/Makefile mkxsubjreg/Makefile \
rbftest/Makefile rawtocor/Makefile \
mri_add_xform_to_header/Makefile mri_annotation2label/Makefile mri_auto_fill/Makefile mri_edit_wm_with_aseg/Makefile \
mri_average/Makefile mri_build_priors/Makefile mri_ca_label/Makefile mri_ca_normalize/Makefile \
mri_ca_tissue_parms/Makefile mri_ca_register/Makefile mri_ca_train/Makefile mri_cc/Makefile mri_cor2label/Makefile \
mri_cnr/Makefile mri_compute_overlap/Makefile mri_convert/Makefile mri_convert_mdh/Makefile \
mri_copy_values/Makefile mri_deface/Makefile mri_edit_segmentation/Makefile \
mri_edit_segmentation_with_surfaces/Makefile mri_em_register/Makefile mri_estimate_tissue_parms/Makefile \
mri_evaluate_morph/Makefile mri_extract/Makefile mri_extract_conditions/Makefile \
mri_extract_label/Makefile mri_fill/Makefile mri_gca_ambiguous/Makefile mri_gdfglm/Makefile \
mri_head/Makefile mri_histo_eq/Makefile mri_info/Makefile mri_joint_density/Makefile \
mri_label_histo/Makefile mri_label_vals/Makefile mri_label_volume/Makefile mri_label2label/Makefile mri_label2vol/Makefile \
mri_linear_register/Makefile mri_make_bem_surfaces/Makefile mri_make_template/Makefile mri_make_register/Makefile \
mri_mark_temporal_lobe/Makefile mri_mask/Makefile mri_matrix_multiply/Makefile mri_ms_fitparms/Makefile \
mri_nlfilter/Makefile mri_normalize/Makefile mri_partial_ribbon/Makefile mri_paint/Makefile \
mri_parselabel/Makefile mri_parse_sdcmdir/Makefile mri_polv/Makefile mri_probedicom/Makefile mri_probe_ima/Makefile \
mri_reduce/Makefile mri_register/Makefile mri_relabel_hypointensities/Makefile \
mri_remove_neck/Makefile mri_ribbon/Makefile mri_rigid_register/Makefile \
mri_segment/Makefile mri_seghead/Makefile mri_surfcluster/Makefile mri_surfacemask/Makefile mri_strip_skull/Makefile \
mri_strip_subject_info/Makefile mri_strip_nonwhite/Makefile mri_surf2surf/Makefile \
mri_surf2vol/Makefile mri_synthesize/Makefile mri_tessellate/Makefile mri_transform/Makefile \
mri_train/Makefile mri_twoclass/Makefile mri_volcluster/Makefile mri_volsynth/Makefile \
mri_vol2roi/Makefile mri_vol2surf/Makefile mri_watershed/Makefile mri_wmfilter/Makefile \
mri_xvolavg/Makefile stim/Makefile stim_polar/Makefile tridec/Makefile \
mris_add_template/Makefile mris_anatomical_stats/Makefile mris_annot_to_segmentation/Makefile mris_average_curvature/Makefile \
mris_ca_label/Makefile mris_ca_train/Makefile mris_classify_thickness/Makefile mris_compute_acorr/Makefile \
mris_compute_overlap/Makefile mris_convert/Makefile mris_curvature/Makefile \
mris_curvature_stats/Makefile mris_entropy/Makefile mris_errors/Makefile \
mris_euler_number/Makefile mris_expand/Makefile mris_find_flat_regions/Makefile mris_fix_topology/Makefile \
mris_flatten/Makefile mris_glm/Makefile mris_inflate/Makefile mris_info/Makefile mris_jacobian/Makefile \
mris_label_area/Makefile mris_label_mode/Makefile mris_make_average_surface/Makefile \
mris_make_surfaces/Makefile mris_make_template/Makefile \
mris_morph_stats/Makefile mris_multiscale_stats/Makefile \
mris_remove_variance/Makefile mris_rescale/Makefile mris_reverse/Makefile mris_rotate/Makefile \
mris_ms_refine/Makefile mris_register/Makefile mris_sample_label/Makefile \
mris_sample_parc/Makefile mris_segment_vals/Makefile mris_smooth/Makefile mris_sphere/Makefile \
mris_spherical_average/Makefile mris_surface_to_vol_distances/Makefile mrisp_paint/Makefile \
mris_talairach/Makefile mris_thickness/Makefile mris_thickness_comparison/Makefile \
mris_transform/Makefile mris_translate_annotation/Makefile mris_twoclass/Makefile \
mris_w_to_curv/Makefile fsgdf/Makefile fslutils/Makefile optseq2/Makefile spm2bfloat/Makefile statcombine/Makefile \
stat_normalize/Makefile regdat2xfm/Makefile scuba/Makefile test_window_env/Makefile \
brik2bfloat/Makefile minc_to_bshort/Makefile paint/Makefile \
histo_compute_joint_density/Makefile histo_register_block/Makefile scripts/Makefile images/Makefile \
distribution/Makefile distribution/lib/Makefile distribution/lib/bem/Makefile distribution/average/Makefile \
distribution/docs/Makefile \
distribution/grad_unwarp_tables/Makefile \
mri_modify/Makefile \
utils/test/Makefile \
mri_watershed/brain_volume/Makefile \
mri_cht2p/Makefile \
mri_vol2vol/Makefile \
dngtester/Makefile \
mri_threshold/Makefile \
dummy/Makefile \
fsfast/Makefile fsfast/bin/Makefile fsfast/docs/Makefile fsfast/toolbox/Makefile \
matlab/Makefile \
label_area/Makefile \
 ) 


