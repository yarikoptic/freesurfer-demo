#
# configure.in
# by y.tosa
# June 17, 2004
#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.
#
# "$Id: configure.in,v 1.165.2.11 2006/11/29 17:35:57 nicks Exp $"
#
AC_PREREQ(2.57)
AC_INIT(Freesurfer, stable3, freesurfer@nmr.mgh.harvard.edu)
AC_CONFIG_AUX_DIR([config])
# create specifal dir for intermediate files
AC_MSG_NOTICE(Setting System...)
# set target, build, host etc.
AC_CANONICAL_SYSTEM
AM_INIT_AUTOMAKE
AC_CONFIG_SRCDIR([config.h.in])
AM_CONFIG_HEADER([config.h])

# if CFLAGS and CXXFLAGS are not already set, then set to empty,
# otherwise, AC_PROG_CPP and AC_PROG_CXX will automatically append
# "-g -O2", flags over which we'd rather have explicit control per OS
if test "x$CFLAGS" = "x"; then
  CFLAGS=""
  AC_SUBST(CFLAGS)
fi
if test "x$CXXFLAGS" = "x"; then
  CXXFLAGS=""
  AC_SUBST(CXXFLAGS)
fi

# Checks for programs.
AC_PROG_AWK
AC_PROG_CXX
AC_PROG_CC_STDC
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_CPP
AC_PROG_LIBTOOL

# two programs used for compress/decompress files
# cannot make AC_MSG_ERROR work inside the AC_CHECK_PROG so
# that I took it out.
AC_CHECK_PROG([HAS_ZCAT],[zcat],[1],[])
if test ! "$HAS_ZCAT" = "1"; then
  AC_MSG_ERROR([FATAL: zcat is required in handling mgz etc. \
Put it in the path.])
fi

AC_CHECK_PROG([HAS_GZIP],[gzip],[1],[])
if test ! "$HAS_GZIP" = "1"; then
  AC_MSG_ERROR([FATAL: gzip is required in creating mgz etc. \
Put it in the path.])
fi

##################################################################
# allow user to specify tixwish
AC_ARG_WITH(tixwish,
[  --with-tixwish=TIXWISH  where you specify the file for tixwish],
  [TIXWISH=$withval],[])
# if TIXWISH has been set, then it does not do anything
AC_PATH_PROG([TIXWISH],[tixwish],[])
if test "x$TIXWISH" = "x"; then
  AC_PATH_PROG([TIXWISH],[tixwish8.1.8.3],[])
  if test "x$TIXWISH" = "x"; then
    AC_PATH_PROG([TIXWISH],[tixwish8.1.8.4],[])
  fi
fi
# well check
if test "x$TIXWISH" = "x"; then
  AC_MSG_ERROR([FATAL: tixwish needed for csurf not found. \
Use --with-tixwish=... to specify])
fi

AC_SUBST(TIXWISH)

#################################################################
# If on a Mac, make scuba, qdec, and plotter bundles (Qt apps)
SCUBA_BUNDLE_TARGET=""
if test "x$target_vendor" = "xapple" ; then
  SCUBA_BUNDLE_TARGET="scuba_bundle"
fi
AC_SUBST(SCUBA_BUNDLE_TARGET)

QDEC_BUNDLE_TARGET=""
if test "x$target_vendor" = "xapple" ; then
  QDEC_BUNDLE_TARGET="qdec_bundle"
fi
AC_SUBST(QDEC_BUNDLE_TARGET)

PLOTTER_BUNDLE_TARGET=""
if test "x$target_vendor" = "xapple" ; then
  PLOTTER_BUNDLE_TARGET="plotter_bundle"
fi
AC_SUBST(PLOTTER_BUNDLE_TARGET)

################################################################
# set platform related variable defaults for (Teem) NrrdIO
# in utils
################################################################
TEEM_DIO=0
TEEM_32BIT=1
TEEM_ENDIAN=4321
TEEM_QNANHIBIT=1
AC_SUBST(TEEM_DIO)
AC_SUBST(TEEM_QNANHIBIT)

################################################################
# define OS
################################################################
AC_C_BIGENDIAN_CROSS
echo "byte order is " $BYTEORDER
AC_SUBST(BYTEORDER)
TEEM_ENDIAN=$BYTEORDER

# Support for files >2GB (Large File Support)
LFS_CFLAGS="-D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE"

AC_MSG_NOTICE(Setting OS from target...)
case "${target}" in
 i*86-*-linux-gnu*)
 OS=Linux
 OS_CPPFLAGS=
 OS_LDFLAGS=
 DYNAMIC_LIB_EXT=".so"
 SHARED_CFLAGS="-fPIC "
 SHARED_LDFLAGS="-shared "
 CFLAGS="-g -O2 -Wall -Werror $LFS_CFLAGS $CFLAGS"
 CXXFLAGS="-g -O2 -Wall -Werror $LFS_CFLAGS $CXXFLAGS"
 ;;
 x86_64-*)
 OS=Linux
 OS_CPPFLAGS=
 OS_LDFLAGS=
 LDFLAGS="-L/usr/X11R6/lib64 -L/usr/lib64 $LDFLAGS"
 DYNAMIC_LIB_EXT=".so"
 SHARED_CFLAGS="-fPIC"
 SHARED_LDFLAGS="-shared"
 CFLAGS="-g -O2 -Wall -fno-strict-aliasing -Werror $CFLAGS"
 CXXFLAGS="-g -O2 -Wall -fno-strict-aliasing -Werror $CXXFLAGS"
 TEEM_32BIT=0
 ;;
 *-apple-darwin*)
 # Mac OS X
 OS=Darwin
 OS_CPPFLAGS=
 OS_LDFLAGS=
 DYNAMIC_LIB_EXT=".dylib"
 SHARED_CFLAGS="-fno-common"
 SHARED_LDFLAGS="-dynamiclib"
 CFLAGS="-g -O2 -Wall -Werror -Wno-long-double $LFS_CFLAGS $CFLAGS"
# -Wno-non-virtual-dtor suppresses valid scuba warning:
# "has virtual functions but non-virtual destructor"
 CXXFLAGS="-g -O2 -Wall -Werror -Wno-non-virtual-dtor $LFS_CFLAGS $CXXFLAGS"
 ;;
 i*86-*-solaris*)
 OS=SunOS
 OS_CPPFLAGS=
 OS_LDFLAGS=
 DYNAMIC_LIB_EXT=".so"
 SHARED_CFLAGS="-fPIC "
 SHARED_LDFLAGS="-shared "
 CFLAGS="-g -O2 -Wall $CFLAGS"
 CXXFLAGS="-g -O2 -Wall $CXXFLAGS"
 ;;
esac
AC_SUBST(OS)
AC_SUBST(OS_CPPFLAGS)
AC_SUBST(OS_LDFLAGS)
AC_SUBST(DYNAMIC_LIB_EXT)
AC_SUBST(TEEM_32BIT)
AC_SUBST(TEEM_ENDIAN)

# export
AC_SUBST(SHARED_CFLAGS)
AC_SUBST(SHARED_LDFLAGS)

AC_MSG_NOTICE(OS is $OS)

##############################################################
# cpu optimization
##############################################################
if test "${CC}" = "gcc"; then
AC_MSG_NOTICE(Setting CPU optimization...)
CPUFLAGS=""
CPUTYPE="NO"
####
#### cpu type: we support
####     pentium3, pentium4,
####     athlon-xp, opteron, athlon64, athlon-fx
####
AC_ARG_WITH(cpu,
[  --with-cpu=CPUTYPE      where CPUTYPE is pentium4, athlon-xp, G4, G5...],
  [CPUTYPE=$withval],[])
# --with-cpu not used  automatically figure out
if test "$CPUTYPE" = "NO"; then
  case "$OS" in
  Darwin)
    maccpu=`machine`
    case "$maccpu" in
      ppc750)
      CPUTYPE=G3
      ;;
      ppc7450)
      CPUTYPE=G4
      ;;
      ppc970)
      CPUTYPE=G5
      ;;
      *)
      CPUTYPE="NO"
      echo "unknown mac cpu $maccpu"
      ;;
      esac
    ;;
  Linux)
    case "${target}" in
    i*86-*-linux-gnu*)
      cpu386=`./x86cpucaps/cpucaps -m | sed 's/ //g'`
      case "$cpu386" in
        PentiumIII*)
        CPUTYPE=pentium3
        ;;
        Pentium4)
        CPUTYPE=pentium4
        ;;
        PentiumM*)
        CPUTYPE=pentium4
        ;;
        AMDAthlonXP*)
        CPUTYPE=athlonxp
        ;;
      esac
      ;;
    x86_64-*)
      cpu386=`./x86cpucaps/cpucaps -m | sed 's/ //g'`
      case "$cpu386" in
        AMDAthlon64)
        CPUTYPE=athlon64
        ;;
        AMDOpteron*)
        CPUTYPE=opteron
        ;;
      esac
      ;;
    powerpc64-*)
      CPUTYPE=power4
      ;;
    esac
    ;;
  esac
fi

AC_MSG_NOTICE(CPUTYPE is $CPUTYPE)
AC_MSG_CHECKING(CPU optimization...)

# now set the flags
case "$CPUTYPE" in
  pentium3)
#     CPUFLAGS="-march=pentium3"
     CPUFLAGS=""
     ;;
  pentium4)
#     CPUFLAGS="-march=pentium4"
     CPUFLAGS=""
     ;;
  athlonxp)
#     CPUFLAGS="-march=pentium3"
     CPUFLAGS=""
     ;;
  opteron)
#     CPUFLAGS="-march=x86-64"
     CPUFLAGS="-m64"
     ;;
  athlon64)
#     CPUFLAGS="-march=x86-64"
     CPUFLAGS="-m64"
     ;;
  athlon-fx)
#     CPUFLAGS="-march=x86-64"
     CPUFLAGS="-m64"
     ;;
  G4)
     CPUFLAGS="-fast -mtune=G4 -mcpu=G4 -faltivec"
     ;;
  G5)
     # maintain G4 backwards compatibility
     CPUFLAGS="-fast -mtune=G4 -mcpu=G4 -faltivec"
     ;;
  power4)
     CPUFLAGS="-mtune=power4 -mcpu=power4"
     ;;
  power5)
     CPUFLAGS="-mtune=power5 -mcpu=power5"
     ;;
  *)
     echo "cpu optimization not set"
     ;;
esac

found=$CPUFLAGS
# set the value

AC_MSG_RESULT($found)
# verify the flag work (need to make this as macro)
###############################################################
ac_save_CFLAGS=$CFLAGS
CFLAGS="$CPUFLAGS $CFLAGS"
echo "$as_me:$LINENO: checking whether $CC accepts $CPUFLAGS" >&5
echo $ECHO_N "checking whether $CC accepts $CPUFLAGS... $ECHO_C" >&6
if test "${ac_cv_prog_cc_cpuflags+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  cat >conftest.$ac_ext <<_ACEOF
#line $LINENO "configure"
/* confdefs.h.  */
_ACEOF
cat confdefs.h >>conftest.$ac_ext
cat >>conftest.$ac_ext <<_ACEOF
/* end confdefs.h.  */

int
main ()
{

  ;
  return 0;
}
_ACEOF
rm -f conftest.$ac_objext
if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
  (eval $ac_compile) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); } &&
         { ac_try='test -s conftest.$ac_objext'
  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
  (eval $ac_try) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); }; }; then
  ac_cv_prog_cc_cpuflags=yes
else
  echo "$as_me: failed program was:" >&5
sed 's/^/| /' conftest.$ac_ext >&5

ac_cv_prog_cc_cpuflags=no
fi
rm -f conftest.$ac_objext conftest.$ac_ext
fi

echo "$as_me:$LINENO: result: $ac_cv_prog_cc_cpuflags" >&5
echo "${ECHO_T}$ac_cv_prog_cc_cpuflags" >&6

if test $ac_cv_prog_cc_cpuflags = no; then
 AC_MSG_NOTICE([gcc on this PC cannot accept $CPUFLAGS. gcc may be too old?])
 CPUFLAGS=""
fi
# write the flag file
echo "CPUFLAGS=$CPUFLAGS" > cpuflags.mak

CFLAGS=$ac_save_CFLAGS
CFLAGS="$CPUFLAGS $CFLAGS"
CXXFLAGS="$CPUFLAGS $CXXFLAGS"

#####
else
  AC_MSG_NOTICE([cpu optimization not done. you must use gcc.])

# if gcc
fi

##############################################################
# This macro figures out how to build C programs using
# POSIX threads.
##############################################################
ACX_PTHREAD

##############################################################
# get the path for X includes and X libraries
##############################################################
AC_PATH_X
##### Apple is really tricky
##### compiles <X11/Intrinsic.h> without the need for X_CFLAGS
##### However, GL/gl.h in /usr/X11R6/include/GL/gl.h is not
##### automaticaly found
if test -z "$x_includes"; then
  x_includes=/usr/X11R6/include
  AC_MSG_NOTICE([x_includes set to /usr/X11R6/include \
If not correct specify using --x-includes=])
fi
X_LIBS="$X_LIBS -lX11 -lXmu"
AC_SUBST(X_LIBS)

##############################################################
# allow user to specify root of multi-package directory,
# such as one containing all freesurfer dependencies:
# jpeg, tiff, gsl, tcl, tk, tix, blt, MNI (netcdf, minc,
# mni-perlib, EBTKS, N3)...
##############################################################
ac_pkgs_includes="NO"
ac_pkgs_libraries="NO"
pkgs_includes=""
pkgs_libraries=""

AC_ARG_WITH(pkgs-dir,
[  --with-pkgs-dir=DIR     where the root of multiple pkgs are installed.],
  [  ac_pkgs_includes="$withval"/include
     ac_pkgs_libraries="$withval"/lib
  ])

# modify CPPFLAGS and LDFLAGS
if test ! "$ac_pkgs_includes" = "NO"; then
  AC_MSG_RESULT([Packages directory is $withval])
  pkgs_includes=-I$ac_pkgs_includes
  CPPFLAGS="$CPPFLAGS $pkgs_includes"
fi
if test ! "$ac_pkgs_libraries" = "NO"; then
  pkgs_libraries=-L$ac_pkgs_libraries
  LDFLAGS="$LDFLAGS $pkgs_libraries"
fi

AC_SUBST(pkgs_includes)
AC_SUBST(pkgs_libraries)


AC_MSG_NOTICE([Checking directories for MNI, BLT, Tiff, \
Jpeg, Qt, and GSL])

#############################################################
# MNI
#############################################################
ac_mni_includes=NO
ac_mni_libraries=NO
ac_mni_bindir=NO
MNI_CFLAGS=""
MNI_LIBS=""
AC_MSG_CHECKING(MNI directory)

AC_ARG_WITH(mni-dir,
[  --with-mni-dir=DIR      where the root of MNI is installed.],
  [  ac_mni_includes="$withval"/include
     ac_mni_libraries="$withval"/lib
     ac_mni_bindir="$withval"/bin
  ])

if test ! "$ac_mni_includes" = "NO"; then
  AC_MSG_RESULT(MNI directory is $withval)
  MNI_CFLAGS=-I$ac_mni_includes
else
  AC_MSG_RESULT(MNI directory is not supplied)
fi
if test ! "$ac_mni_libraries" = "NO"; then
  MNI_LIBS=-L$ac_mni_libraries
fi

AC_SUBST(MNI_CFLAGS)
AC_SUBST(MNI_LIBS)

################################################################
# BLT
################################################################
ac_blt_includes="NO"
ac_blt_libraries="NO"
ac_blt_bindir="NO"
BLT_CFLAGS=""
BLT_LIBS=""
AC_MSG_CHECKING(BLT directory)

AC_ARG_WITH(BLT-dir,
[  --with-BLT-dir=DIR      where the root of Blt/Tk is installed.],
  [  ac_blt_includes="$withval"/include
     ac_blt_libraries="$withval"/lib
     ac_blt_bindir="$withval"/bin
  ])

if test ! "$ac_blt_includes" = "NO"; then
  AC_MSG_RESULT(BLT directory is $withval)
  BLT_CFLAGS=-I$ac_blt_includes
else
  AC_MSG_RESULT(BLT directory is not supplied)
fi
if test ! "$ac_blt_libraries" = "NO"; then
  BLT_LIBS=-L$ac_blt_libraries
fi

AC_SUBST(BLT_CFLAGS)
AC_SUBST(BLT_LIBS)

################################################################
# tiff
################################################################
ac_tiff_includes="NO"
ac_tiff_libraries="NO"
ac_tiff_bindir="NO"
TIFF_CFLAGS=""
TIFF_LIBS=""
AC_MSG_CHECKING(Tiff directory)

AC_ARG_WITH(tiff-dir,
[  --with-tiff-dir=DIR     where the root of Tiff is installed.],
  [  ac_tiff_includes="$withval"/include
     ac_tiff_libraries="$withval"/lib
     ac_tiff_bindir="$withval"/bin
  ])

if test ! "$ac_tiff_includes" = "NO"; then
  AC_MSG_RESULT(Tiff directory is $withval)
  TIFF_CFLAGS=-I$ac_tiff_includes
else
  AC_MSG_RESULT(Tiff directory is not supplied)
fi
if test ! "$ac_tiff_libraries" = "NO"; then
  TIFF_LIBS=-L$ac_tiff_libraries
fi

AC_SUBST(TIFF_CFLAGS)
AC_SUBST(TIFF_LIBS)

################################################################
# jpeg
################################################################
ac_jpeg_includes="NO"
ac_jpeg_libraries="NO"
ac_jpeg_bindir="NO"
JPEG_CFLAGS=""
JPEG_LIBS=""
AC_MSG_CHECKING(Jpeg directory)

AC_ARG_WITH(jpeg-dir,
  [  --with-jpeg-dir=DIR     where the root of Jpeg is installed.],
  [  ac_jpeg_includes="$withval"/include
     ac_jpeg_libraries="$withval"/lib
     ac_jpeg_bindir="$withval"/bin
  ])

if test ! "$ac_jpeg_includes" = "NO"; then
  AC_MSG_RESULT(Jpeg directory is $withval)
  JPEG_CFLAGS=-I$ac_jpeg_includes
else
  AC_MSG_RESULT(Jpeg directory is not supplied)
fi
if test ! "$ac_jpeg_libraries" = "NO"; then
  JPEG_LIBS=-L$ac_jpeg_libraries
fi

AC_SUBST(JPEG_CFLAGS)
AC_SUBST(JPEG_LIBS)

################################################################
# GSL
################################################################
ac_gsl_includes="NO"
ac_gsl_libraries="NO"
ac_gsl_bindir="NO"
GSL_CFLAGS=""
GSL_LIBS=""
AC_MSG_CHECKING(GSL directory)

AC_ARG_WITH(gsl-dir,
  [  --with-gsl-dir=DIR      where the root of GSL is installed.],
  [  ac_gsl_includes="$withval"/include
     ac_gsl_libraries="$withval"/lib
     ac_gsl_bindir="$withval"/bin
  ])

if test ! "$ac_gsl_includes" = "NO"; then
  AC_MSG_RESULT(GSL directory is $withval)
  GSL_CFLAGS=-I$ac_gsl_includes
else
  AC_MSG_RESULT(GSL directory is not supplied)
fi
if test ! "$ac_gsl_libraries" = "NO"; then
  GSL_LIBS=-L$ac_gsl_libraries
fi

AC_SUBST(GSL_CFLAGS)
AC_SUBST(GSL_LIBS)

################################################################
# Qt
################################################################
ac_qt_includes="NO"
ac_qt_libraries="NO"
ac_qt_bindir="NO"
ac_qt_dir="NO"
QT_CFLAGS=""
QT_LIBS=""
AC_MSG_CHECKING(Qt directory)

AC_ARG_WITH(qt-dir,
  [  --with-qt-dir=DIR       where the root of Qt is installed.],
  [  ac_qt_includes="$withval"/include
     ac_qt_libraries="$withval"/lib
     ac_qt_bindir="$withval"/bin
     ac_qt_dir="$withval"
  ])

if test ! "$ac_qt_includes" = "NO"; then
  AC_MSG_RESULT(Qt directory is $withval)
  QT_CFLAGS=-I$ac_qt_includes
  QTDIR=$ac_qt_dir
  AC_SUBST(QTDIR)
else
  AC_MSG_RESULT(Qt directory is not supplied)
fi
if test ! "$ac_qt_libraries" = "NO"; then
  QT_LIBS=-L$ac_qt_libraries
fi

AC_SUBST(QT_CFLAGS)
AC_SUBST(QT_LIBS)

################################################################
# CPPUNIT
################################################################
ac_cppunit_includes="NO"
ac_cppunit_libraries="NO"
ac_cppunit_bindir="NO"
ac_cppunit_dir="NO"
CPPUNIT_CFLAGS=""
CPPUNIT_LIBS=""
AC_MSG_CHECKING(CppUnit directory)

AC_ARG_WITH(cppunit-dir,
  [  --with-cppunit-dir=DIR  where the root of CppUnit is installed.],
  [  ac_cppunit_includes="$withval"/include
     ac_cppunit_libraries="$withval"/lib
     ac_cppunit_bindir="$withval"/bin
     ac_cppunit_dir="$withval"
  ])

if test ! "$ac_cppunit_includes" = "NO"; then
  AC_MSG_RESULT(CppUnit directory is $withval)
  CPPUNIT_CFLAGS=-I$ac_cppunit_includes
  CPPUNIT_DIR=$ac_cppunit_dir
  AC_SUBST(CPPUNIT_DIR)
else
  AC_MSG_RESULT(CppUnit directory is not supplied)
fi

if test ! "$ac_cppunit_libraries" = "NO"; then
  CPPUNIT_LIBS=-L$ac_cppunit_libraries
fi

AC_SUBST(CPPUNIT_CFLAGS)
AC_SUBST(CPPUNIT_LIBS)

#####################################################
# OpenGL
#####################################################
AC_MSG_NOTICE(Getting OpenGL info...)

if test "X$with_apple_opengl_framework" = "Xyes"; then
  AC_MSG_RESULT([Using the Apple OpenGL and GLUT Frameworks])
  AC_DEFINE([HAVE_APPLE_OPENGL_FRAMEWORK], [1],
           [Use the Apple OpenGL framework.])
  AC_DEFINE([HAVE_APPLE_GLUT_FRAMEWORK], [1],
            [Use the Apple GLUT framework.])
  CPPFLAGS="$CPPFLAGS -DHAVE_APPLE_OPENGL_FRAMEWORK"
  CPPFLAGS="$CPPFLAGS -DHAVE_APPLE_GLUT_FRAMEWORK"
  GL_CFLAGS="-I/System/Libraries/Frameworks"
  GL_LIBS="-framework OpenGL"
  GLU_CFLAGS="-I/System/Libraries/Frameworks"
  GLU_LIBS="-framework OpenGL"
  glut_cflags="-I/System/Libraries/Frameworks"
  glut_libs="-framework GLUT"
  with_apple_opengl_framework="yes"
  AC_SUBST([GL_CFLAGS])
  AC_SUBST([GL_LIBS])
  AC_SUBST([GLU_CFLAGS])
  AC_SUBST([GLU_LIBS])
  AC_SUBST([glut_cflags])
  AC_SUBST([glut_libs])
  AC_SUBST(with_apple_opengl_framework)
else
  #####
  # GL
  #####
  ac_gl_includes="NO"
  ac_gl_libraries="NO"
  ac_gl_bindir="NO"
  GL_CFLAGS=""
  GL_LIBS=""
  AC_MSG_CHECKING(GL directory)

  AC_ARG_WITH(gl-dir,
    [  --with-gl-dir=DIR       where the root of OpenGL is installed.],
    [  ac_gl_includes="$withval"/include
       ac_gl_libraries="$withval"/lib
       ac_gl_bindir="$withval"/bin
    ])

  if test ! "$ac_gl_includes" = "NO"; then
    AC_MSG_RESULT(gl directory is $withval)
    GL_CFLAGS=-I$ac_gl_includes
  else
    AC_MSG_RESULT(OpenGL directory is not supplied)
  fi
  if test ! "$ac_gl_libraries" = "NO"; then
    GL_LIBS=-L$ac_gl_libraries
  fi

  AC_SUBST(GL_CFLAGS)
  AC_SUBST(GL_LIBS)

  #######
  # GLUT
  #######
  ac_glut_includes="NO"
  ac_glut_libraries="NO"
  ac_glut_bindir="NO"
  # these are lower-case because later AX_CHECK_GLUT trounces
  # GLUT_CLFLAGS and GLUT_LIBS:
  glut_cflags=""
  glut_libs=""
  AC_MSG_CHECKING(GLUT directory)

  AC_ARG_WITH(glut-dir,
    [  --with-glut-dir=DIR     where the root of GLUT is installed.],
    [  ac_glut_includes="$withval"/include
       ac_glut_libraries="$withval"/lib
       ac_glut_bindir="$withval"/bin
    ])

  if test ! "$ac_glut_includes" = "NO"; then
    AC_MSG_RESULT(GLUT directory is $withval)
    glut_cflags=-I$ac_glut_includes
  else
    AC_MSG_RESULT(GLUT directory is not supplied)
  fi
  if test ! "$ac_glut_libraries" = "NO"; then
    glut_libs="-L$ac_glut_libraries -lglut"
  fi

  AC_SUBST(glut_cflags)
  AC_SUBST(glut_libs)
fi

#####################################################
# AX_CHECK_GL produces GL_CFLAGS GL_LIBS
AX_CHECK_GL
if test "X$no_gl" = "Xyes"; then
  AC_MSG_RESULT([GL not found])
else
  AC_MSG_RESULT([GL found:
Setting GL_CFLAGS='$GL_CFLAGS'
and GL_LIBS='$GL_LIBS'])
  LIBS_OPENGL="$LIBS_OPENGL $GL_LIBS"
fi
#####################################################
# AX_CHECK_GLU produces GLU_CFLAGS GLU_LIBS
AX_CHECK_GLU
if test "X$no_glu" = "Xyes"; then
  AC_MSG_RESULT([GLu not found])
else
  AC_MSG_RESULT([GLu found:
Setting GLU_CFLAGS='$GLU_CFLAGS'
and GLU_LIBS='$GLU_LIBS'])
  #redundant: LIBS_OPENGL="$LIBS_OPENGL $GLU_LIBS"
fi
#####################################################
# AX_CHECK_GLUT produces GLUT_CFLAGS GLUT_LIBS
ac_save_cflags=$CFLAGS
ac_save_ldflags=$LDFLAGS
CFLAGS="$glut_cflags $GL_CFLAGS $GLU_CFLAGS $CFLAGS"
LDFLAGS="$glut_libs $GL_LIBS $GLU_LIBS $LDFLAGS"
AX_CHECK_GLUT
if test "X$no_glut" = "Xyes"; then
  AC_MSG_RESULT([GLut not found])
else
  if test "$OS" = "Darwin"; then
    #AX_CHECK_GLUT really fudges these,
    #so use proper settings (from above)
    GLUT_CFLAGS="$glut_cflags"
    GLUT_LIBS="$glut_libs"
    #Also, we use these as catch-all, for GL and GLU:
    GLUT_CFLAGS="$GLU_CFLAGS $GLUT_CFLAGS"
    GLUT_LIBS="$GLUT_LIBS $GLU_LIBS $X_LIBS"
    AC_SUBST([GLUT_CFLAGS])
    AC_SUBST([GLUT_LIBS])
  fi
  AC_MSG_RESULT([GLut found:
Setting GLUT_CFLAGS='$GLUT_CFLAGS'
and GLUT_LIBS='$GLUT_LIBS'])
  LIBS_OPENGL="$LIBS_OPENGL $GLUT_LIBS"
fi
CFLAGS=$ac_save_cflags
LDFLAGS=$ac_save_ldflags


#####################################################
# Tcl/Tk
####################################################
AC_MSG_NOTICE(Tcl/Tk directory)
################# apple
AC_ARG_WITH([apple-tcl-framework],
      [AC_HELP_STRING([--with-apple-tcl-framework])])
if test "X$with_apple_tcl_framework" = "Xyes"; then
  AC_MSG_ERROR([FATAL: tkmedit/tksurfer needs BLT. \
No Aqua version of BLT exists yet.])
#  AC_MSG_NOTICE([Apple framework way...])
#  AC_DEFINE([HAVE_APPLE_TCL_FRAMEWORK],[1],
#            [Use the Apple Tcl framework,])
#  TCL_CFLAGS="-framework Tcl -framework Tk"
#  TCL_LIBS="-L/Library/Tcl/Tix8.4"
#  LIBS_TCL="-lTix8.4"
else
################## other cases
# here are uni*es
  AC_MSG_NOTICE([unix style...])
  ac_tcl_includes="NO"
  ac_tcl_libraries="NO"
  ac_tcl_bindir="NO"
  TCL_CFLAGS=""
  TCL_LIBS=""

  AC_ARG_WITH(tcl-dir,
[  --with-tcl-dir=DIR      where the root of Tcl/Tk is installed.],
    [  ac_tcl_includes="$withval"/include
       ac_tcl_libraries="$withval"/lib
       ac_tcl_bindir="$withval"/bin
    ])

  if test ! "$ac_tcl_includes" = "NO"; then
    AC_MSG_RESULT([Tcl directory is $withval])
    TCL_CFLAGS=-I$ac_tcl_includes
  else
    AC_MSG_RESULT([Tcl directory is not supplied])
  fi

  if test ! "$ac_tcl_libraries" = "NO"; then
    TCL_LIBS=-L$ac_tcl_libraries
  fi

  TCL_CFLAGS="$BLT_CFLAGS $TCL_CFLAGS"
fi
###### end of uni*es

AC_SUBST(TCL_CFLAGS)
AC_SUBST(TCL_LIBS)
AC_SUBST(LIBS_TCL)


###################################################################
# Install NMR Martinos Center files (not included in distribution)
###################################################################
AC_ARG_ENABLE(nmr-install,
 [  --enable-nmr-install     install NMR Center-only files],
   [case "${enableval}" in
        yes) nmrinstall=true ;;
        no)  nmrinstall=false  ;;
        *)   AC_MSG_ERROR(bad value ${enableval} for --enable-nmr-install) ;;
    esac],
[nmrinstall=false])

if test "x$nmrinstall" = "xtrue"; then
    AC_MSG_RESULT([Performing an NMR installation.])
else
    AC_MSG_RESULT([Performing an off-site installation.])
fi

AM_CONDITIONAL(NMR_INSTALL, test x$nmrinstall = xtrue)


################################################
LIBDIRS_MGH="utils rgb unix dicom hipsstubs"
AC_SUBST(LIBDIRS_MGH)

# stupid circular dependency on iopen swapInt etc.
LIBS_MGH="\
  utils/libutils.a \
  rgb/librgb.a \
  unix/libunix.a \
  dicom/libdicom.a \
  hipsstubs/libhipsstubs.a \
  log/liblog.a"
AC_SUBST(LIBS_MGH)


#####################################################
# generic mods
#####################################################
CPPFLAGS="$CPPFLAGS -D$OS -DANSI $OS_CPPFLAGS"
LDFLAGS="$LDFLAGS $OS_LDFLAGS"

#####################################################
# Checks for libraries.
# the order is important
#####################################################
# the entire libs here is passed as LIBS
# thus save the current one, along with flags, which
# are restored upon completion of these checks
ac_save_libs=$LIBS
ac_save_cppflags=$CPPFLAGS
ac_save_ldflags=$LDFLAGS
CPPFLAGS="$CPPFLAGS $TIFF_CFLAGS $JPEG_CFLAGS \
$MNI_CFLAGS $GSL_CFLAGS $TCL_CFLAGS $CPPUNIT_CFLAGS \
$GL_CFLAGS $GLU_CFLAGS $GLUT_CFLAGS"
LDFLAGS="$LDFLAGS $TIFF_LIBS $JPEG_LIBS $MNI_LIBS $GSL_LIBS $TCL_LIBS \
$CPPUNIT_LIBS $GL_LIBS $GLU_LIBS $GLUT_LIBS"
AC_MSG_NOTICE(Making sure that all libraries can be compiled...)
#AC_MSG_NOTICE(CPPFLAGS: $CPPFLAGS)
#AC_MSG_NOTICE(LDFLAGS: $LDFLAGS)
AC_CHECK_LIB([m], [floor])
AC_CHECK_LIB([z], [gzopen])
AC_CHECK_LIB([crypt], [crypt],[],[echo "(Note: Mac OS X doesn't use crypt)"])
LIB_CRYPT="-lcrypt"
if test "$OS" = "Darwin"; then
  LIB_CRYPT=""
fi
AC_SUBST(LIB_CRYPT)
AC_CHECK_LIB([tiff], [TIFFGetVersion],[],
  [AC_MSG_ERROR([FATAL: tiff lib not found. \
Please install tiff header files and libs.])] )
AC_CHECK_LIB([jpeg], [jpeg_start_compress],[],
  [AC_MSG_ERROR([FATAL: jpeg lib not found. Please install jpeg lib.])] )
# three mni libs
AC_CHECK_LIB([netcdf], [nccreate],[],
  [AC_MSG_ERROR([FATAL: netcdf lib not found. \
Set LDFLAGS or --with-mni-dir.])] )
AC_CHECK_LIB([minc], [miopen], [],
  [AC_MSG_ERROR([FATAL: minc lib not found. \
Set LDFLAGS or --with-mni-dir.])] )
AC_CHECK_LIB([volume_io], [transform_point],[],
  [AC_MSG_ERROR([FATAL: volume_io lib not found. \
Set LDFLAGS or --with-mni-dir.])] )
# GNU scientific library
AC_CHECK_LIB([gslcblas], [cblas_dsdot], [],
  [AC_MSG_ERROR([FATAL: gsl lib not found. \
Please install gsl header files and libs.])] )

################## Tcl
# check tcl8.4
AC_CHECK_LIB([tcl8.4],[Tcl_Init],
  [LIB_TCL=-ltcl8.4],
# check tcl8.3
  [
    AC_CHECK_LIB([tcl8.3],[Tcl_Init],
    [LIB_TCL=-ltcl8.3],
# check tcl
    [ AC_CHECK_LIB([tcl],[Tcl_Init],
      [LIB_TCL=-ltcl],
# check tclstub
      [ AC_CHECK_LIB([tclstub],[Tcl_Init],
        [LIB_TCL=-ltclstub],
        [AC_MSG_ERROR([FATAL: libtcl not found. \
Check config.log. Set LDFLAGS or --with-tcl-dir.])        ] )
      ])
    ])
  ])
#################### Tk needs X11 (or Aqua)
LIBS="$X_LIBS $LIBS"
CPPFLAGS="$GLUT_CFLAGS $GL_CFLAGS $CPPFLAGS"
LDFLAGS="$X_LIBS $LDFLAGS"
# check tk8.4
AC_CHECK_LIB([tk8.4],[Tk_Init],
  [LIB_TK=-ltk8.4],
# check tk8.3
  [
    AC_CHECK_LIB([tk8.3],[Tk_Init],
    [LIB_TK=-ltk8.3],
# check tk
    [
      AC_CHECK_LIB([tk],[Tk_Init],
      [LIB_TK=-ltk],
      [AC_MSG_ERROR([FATAL: libtk not found. \
Check config.log. Set LDFLAGS or --with-tcl-dir.])
      ])
    ])
  ])

##################### Tix
LIBS="$LIB_TK $LIB_TCL $LIBS"
AC_CHECK_LIB([tix],[Tix_Init],
  [LIB_TIX=-ltix],
  [
# check tix8.1.8.4
    AC_CHECK_LIB([tix8.1.8.4], [Tix_Init],
    [LIB_TIX=-ltix8.1.8.4],
    [
# check tix8.1.8.3
      AC_CHECK_LIB([tix8.1.8.3], [Tix_Init],
      [LIB_TIX=-ltix8.1.8.3],
      [AC_MSG_ERROR([FATAL: libtix not found. \
Check config.log. Set LDFLAGS or --with-tcl-dir.])
      ])
    ])
  ])
# if test "X$with_apple_tcl_framework" = "Xyes"; then
#   AC_CHECK_LIB([Tix8.4],[Tix_Init],[],
#              [AC_MSG_ERROR("FATAL: libTix8.4 not found.")])

##################### BLT (we cannot build BLT in Aqua) must use X11
AC_CHECK_LIB([BLT],[Blt_Init],
  [LIB_BLT=-lBLT],
# check BLT.2 (MacOSX)
  [
    AC_CHECK_LIB([BLT.2],[Blt_Init],
    [LIB_BLT=-lBLT.2],
    [
# check BLT24 (Fedora)
      AC_CHECK_LIB([BLT24],[Blt_Init],
      [LIB_BLT=-lBLT24],
          [AC_MSG_ERROR([FATAL: libBLT not found. \
Check config.log. Set LDFLAGS or --with-BLT-dir.])
      ])
    ])
  ])

#
# recover previous settings, from prior to checks.
# let each Makefile.am set as appropriate, choose from:
# MNI_CFLAGS, MNI_LIBS
# JPEG_CFLAGS, JPEG_LIBS
# TIFF_CFLAGS, TIFF_LIBS
# GSL_CFLAGS, GSL_LIBS
# TCL_CFLAGS, TCL_LIBS, LIB_TCL
# TK_CFLAGS, TK_LIBS, LIB_TK, LIB_TIX
# BLT_CFLAGS, BLT_LIBS, LIB_BLT
# GL_CFLAGS, GL_LIBS
# GLU_CFLAGS, GLU_LIBS
# GLUT_CFLAGS, GLUT_LIBS
# QT_CFLAGS, QT_LIBS, QTDIR
#
LIBS=$ac_save_libs
CPPFLAGS=$ac_save_cppflags
LDFLAGS=$ac_save_ldflags

# ...or use combined flags
LDFLAGS_TCL="$BLT_LIBS $TCL_LIBS"
if test "$OS" = "Darwin"; then
  LDFLAGS_TCL="-bind_at_load $LDFLAGS_TCL"
fi
LIBS_TCL="$LIB_BLT $LIB_TIX $LIB_TK $LIB_TCL"
LIBS_TCL_OPENGL="$LIBS_TCL $LIBS_OPENGL"
AC_SUBST(LDFLAGS_TCL)
AC_SUBST(LIBS_TCL)
AC_SUBST(LIBS_TCL_OPENGL)

###########################################################
# some common flags and libs
###########################################################
CPPFLAGS="$CPPFLAGS $MNI_CFLAGS $JPEG_CFLAGS $TIFF_CFLAGS $GSL_CFLAGS"
LDFLAGS="$LDFLAGS $MNI_LIBS $JPEG_LIBS $TIFF_LIBS $GSL_LIBS"
LIBS="-lvolume_io -lminc -lnetcdf -ljpeg -ltiff -lz -lm $LIB_CRYPT $LIBS"
LIBS=" -lgsl -lgslcblas $LIBS"
AC_SUBST(CPPFLAGS)
AC_SUBST(LDFLAGS)
AC_SUBST(LIBS)

# check whether needs Itcl_Init() and Itk_Init()
# except when using Tcl8.4, which doesn't contain Itcl_Init or Itk_Init
if ! test "$LIB_TCL" = "-ltcl8.4"; then
  AX_TIX_INITCHECK($TCL_CFLAGS, $LDFLAGS_TCL, $LIBS_TCL)
fi


##############################################################################
# Checks for header files.
##############################################################################
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS([\
  arpa/inet.h \
  fcntl.h \
  float.h \
  limits.h \
  locale.h \
  malloc.h \
  memory.h \
  netdb.h \
  netinet/in.h \
  stddef.h \
  stdlib.h \
  string.h \
  strings.h \
  sys/file.h \
  sys/ioctl.h \
  sys/param.h \
  sys/socket.h \
  sys/time.h \
  sys/timeb.h \
  unistd.h \
  values.h \
  wctype.h])
# the following is needed on Mac OS Darwin
AC_CHECK_HEADERS(sys/types.h stdint.h)

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_TYPE_MODE_T
AC_TYPE_OFF_T
AC_TYPE_SIZE_T
AC_HEADER_TIME
AC_STRUCT_TM
AC_CHECK_TYPES([ptrdiff_t])

# Checks for library functions.
AC_FUNC_CLOSEDIR_VOID
AC_FUNC_ERROR_AT_LINE
AC_FUNC_LSTAT
AC_FUNC_LSTAT_FOLLOWS_SLASHED_SYMLINK
AC_FUNC_MMAP
AC_FUNC_SELECT_ARGTYPES
AC_TYPE_SIGNAL
AC_FUNC_STAT
AC_FUNC_STRTOD
AC_FUNC_VPRINTF
# freesurfer uses calloc, getenv often so added
AC_CHECK_FUNCS([\
  bzero \
  calloc \
  floor \
  ftime \
  getenv \
  getcwd \
  getpagesize \
  gettimeofday \
  memmove \
  memset \
  mkdir \
  munmap \
  putenv \
  rint \
  select \
  setenv \
  sqrt \
  strcasecmp \
  strchr \
  strdup \
  strerror \
  strncasecmp \
  strrchr \
  strspn \
  strstr \
  strtol \
  uname])

#########################################################################
# output
#########################################################################
AC_OUTPUT(\
Makefile \
unix/Makefile \
dicom/Makefile \
rgb/Makefile \
utils/Makefile \
hipsstubs/Makefile \
log/Makefile \
utilscpp/Makefile \
nmovie/Makefile \
mris_show/Makefile \
tkmedit/Makefile \
tkregister/Makefile \
tkregister2/Makefile \
tksurfer/Makefile \
check_siemens_dir/Makefile \
repair_siemens_file/Makefile \
mkxsubjreg/Makefile \
rbftest/Makefile \
include/Makefile \
include/dicom/Makefile \
include/xview/Makefile \
include/sys/Makefile \
include/nodelib/Makefile \
include/pixrect/Makefile \
include/NrrdIO/Makefile \
mri_add_xform_to_header/Makefile \
mri_annotation2label/Makefile \
mri_aparc2aseg/Makefile \
mri_aparc2wmseg/Makefile \
mri_auto_fill/Makefile \
mri_edit_wm_with_aseg/Makefile \
mri_average/Makefile \
mri_bc_sc_bias_correct/Makefile \
mri_build_priors/Makefile \
mri_ca_label/Makefile \
mri_ca_normalize/Makefile \
mri_ca_tissue_parms/Makefile \
mri_ca_register/Makefile \
mri_ca_train/Makefile \
mri_cc/Makefile \
mri_cht2p/Makefile \
mri_cor2label/Makefile \
mri_cnr/Makefile \
mri_compute_overlap/Makefile \
mri_concat/Makefile \
mri_convert/Makefile \
mri_convert_mdh/Makefile \
mri_copy_values/Makefile \
mri_deface/Makefile \
mri_diff/Makefile \
mri_distance_transform/Makefile \
mri_edit_segmentation/Makefile \
mri_edit_segmentation_with_surfaces/Makefile \
mri_em_register/Makefile \
mri_estimate_tissue_parms/Makefile \
mri_evaluate_morph/Makefile \
mri_extract/Makefile \
mri_extract_conditions/Makefile \
mri_extract_label/Makefile \
mri_fill/Makefile \
mri_fwhm/Makefile \
mri_gca_ambiguous/Makefile \
mri_gdfglm/Makefile \
mri_glmfit/Makefile \
mri_head/Makefile \
mri_hires_register/Makefile \
mri_histo_eq/Makefile \
mri_info/Makefile \
mri_joint_density/Makefile \
mri_label_histo/Makefile \
label_area/Makefile \
mri_label_vals/Makefile \
mri_label_volume/Makefile \
mri_label2label/Makefile \
mri_label2vol/Makefile \
mri_linear_register/Makefile \
mri_make_bem_surfaces/Makefile \
mri_make_density_map/Makefile \
mri_make_template/Makefile \
mri_make_register/Makefile \
mri_mark_temporal_lobe/Makefile \
mri_mask/Makefile \
mri_mcsim/Makefile \
mri_mc/Makefile \
mri_matrix_multiply/Makefile \
mri_ms_fitparms/Makefile \
mri_modify/Makefile \
mri_morphology/Makefile \
mri_nlfilter/Makefile \
mri_normalize/Makefile \
mri_partial_ribbon/Makefile \
mri_paint/Makefile \
mri_parselabel/Makefile \
mri_parse_sdcmdir/Makefile \
mri_polv/Makefile \
mri_probedicom/Makefile \
mri_probe_ima/Makefile \
mri_reduce/Makefile \
mri_register/Makefile \
mri_relabel_hypointensities/Makefile \
mri_remove_neck/Makefile \
mri_ribbon/Makefile \
mri_rigid_register/Makefile \
mri_segstats/Makefile \
mri_segment/Makefile \
mri_seghead/Makefile \
mri_surfcluster/Makefile \
mri_surfacemask/Makefile \
mri_stats2seg/Makefile \
mri_strip_skull/Makefile \
mri_strip_subject_info/Makefile \
mri_strip_nonwhite/Makefile \
mri_surf2surf/Makefile \
mri_surf2vol/Makefile \
mri_synthesize/Makefile \
mri_tessellate/Makefile \
mri_threshold/Makefile \
mri_topologycorrection/Makefile \
mri_transform/Makefile \
mri_train/Makefile \
mri_twoclass/Makefile \
mri_volcluster/Makefile \
mri_voldiff/Makefile \
mri_volsynth/Makefile \
mri_vol2roi/Makefile \
mri_vol2surf/Makefile \
mri_vol2vol/Makefile \
mri_watershed/Makefile \
mri_watershed/brain_volume/Makefile \
mri_wmfilter/Makefile \
mri_xvolavg/Makefile \
mris_add_template/Makefile \
mris_anatomical_stats/Makefile \
mris_annot_to_segmentation/Makefile \
mris_average_curvature/Makefile \
mris_ca_label/Makefile \
mris_ca_train/Makefile \
mris_classify_thickness/Makefile \
mris_compute_acorr/Makefile \
mris_compute_overlap/Makefile \
mris_convert/Makefile mris_curvature/Makefile \
mris_curvature_stats/Makefile \
mris_diff/Makefile \
mris_entropy/Makefile mris_errors/Makefile \
mris_euler_number/Makefile \
mris_expand/Makefile \
mris_find_flat_regions/Makefile \
mris_fix_topology/Makefile \
mris_flatten/Makefile \
mris_fwhm/Makefile \
mris_glm/Makefile mris_inflate/Makefile \
mris_info/Makefile mris_jacobian/Makefile \
mris_label_area/Makefile \
mris_label_mode/Makefile \
mris_make_average_surface/Makefile \
mris_make_surfaces/Makefile \
mris_make_template/Makefile \
mris_morph_stats/Makefile \
mris_multiscale_stats/Makefile \
mris_niters2fwhm/Makefile \
mris_remove_variance/Makefile \
mris_rescale/Makefile \
mris_reverse/Makefile \
mris_rotate/Makefile \
mris_ms_refine/Makefile \
mris_distance_to_label/Makefile \
mris_register/Makefile \
mris_sample_label/Makefile \
mris_sample_parc/Makefile \
mris_segment_vals/Makefile \
mris_smooth/Makefile \
mris_sphere/Makefile \
mris_spherical_average/Makefile \
mris_surface_to_vol_distances/Makefile \
mrisp_paint/Makefile \
mris_talairach/Makefile \
mris_thickness/Makefile \
mris_thickness_comparison/Makefile \
mris_transform/Makefile \
mris_translate_annotation/Makefile \
mris_twoclass/Makefile \
mris_volume/Makefile \
mris_w_to_curv/Makefile \
mris2rgb/Makefile \
stim/Makefile \
stim_polar/Makefile \
tridec/Makefile \
fsgdf/Makefile \
fslutils/Makefile \
optseq2/Makefile \
statcombine/Makefile \
stat_normalize/Makefile \
regdat2xfm/Makefile \
scuba/Makefile \
scuba/images/Makefile \
test_window_env/Makefile \
test_makevol/Makefile \
histo_compute_joint_density/Makefile \
histo_register_block/Makefile \
scripts/Makefile \
images/Makefile \
utils/NrrdIO/Makefile \
utils/test/Makefile \
utilscpp/test/Makefile \
dngtester/Makefile \
dummy/Makefile \
hiam_make_surfaces/Makefile \
spherical_stats/Makefile \
fsfast/Makefile \
fsfast/bin/Makefile \
fsfast/docs/Makefile \
fsfast/toolbox/Makefile \
matlab/Makefile \
distribution/Makefile \
distribution/lib/Makefile \
distribution/lib/bem/Makefile \
distribution/average/Makefile \
distribution/average/surf/Makefile \
distribution/docs/Makefile \
distribution/grad_unwarp_tables/Makefile \
distribution/fsafd/Makefile \
distribution/subjects/Makefile \
distribution/sessions/Makefile \
qdec/Makefile \
qdec/images/Makefile \
mri_segment_wm_damage/Makefile \
mri_fslmat_to_lta/Makefile \
plotter/Makefile \
plotter/docs/Makefile \
plotter/docs/en/Makefile \
mri_ms_EM/Makefile \
mri_ms_EM_with_atlas/Makefile \
mris_thickness_diff/Makefile \
mri_extract_largest_CC/Makefile \
mri_compute_seg_overlap/Makefile \
mris_ms_surface_CNR/Makefile \
mri_concatenate_lta/Makefile \
mris_surface_stats/Makefile \
mri_normalize_tp2/Makefile \
mri_ms_LDA/Makefile \
mri_transform_to_COR/Makefile \
mri_apply_inu_correction/Makefile
)

AC_MSG_RESULT(
[
FreeSurfer is now configured for ${host}

  Source directory:  ${srcdir}
  Install directory: ${prefix}

  C compiler:        ${CC} ${CPPFLAGS} ${CFLAGS}
  C++ compiler:      ${CXX} ${CPPFLAGS} ${CXXFLAGS}
  Linker:            ${LD} ${LDFLAGS}
  Libs:              ${LIBS}
])
