########################################################################
#
#                          -*- Autoconf -*-
# configure.in
# by y.tosa
# June 17, 2004
#
# Process this file with autoconf to produce a configure script.
#
#
########################################################################
AC_PREREQ(2.57)
AC_INIT(Freesurfer, stable4, freesurfer@nmr.mgh.harvard.edu)
# if $FREESURFER_HOME is defined, then use that as default install dir:
if test ! "x${FREESURFER_HOME}" = "x"; then
  ac_default_prefix=${FREESURFER_HOME}
else
# else use this as default install dir:
  ac_default_prefix=/usr/local/freesurfer/${PACKAGE_VERSION}
fi
AC_PREFIX_DEFAULT($ac_default_prefix)
AC_CONFIG_AUX_DIR([config])
# create special dir for intermediate files
AC_MSG_NOTICE(Setting System...)
# set target, build, host etc.
AC_CANONICAL_SYSTEM

##########################################################################
# To use the Intel C/C++ compiler, assuming it is installed here:
#   /opt/intel/cce/10.0.023
# do this prior to configuring:
#   source /opt/intel/cce/10.0.023/bin/iccvars.csh
#   setenv CC icc
#   setenv CXX icpc
#   setenv LD icpc
#   setenv LDFLAGS "-L/opt/intel/cce/10.0.023/lib"
#
# Note: until all the warnings produced by icc are fixed in the source,
# it is necessary to remove -Werror from CFLAGS (see WERROR in this file).
##########################################################################


#####################################################################
# perform our own vendor string customizations...
#####################################################################
if test -e /etc/redhat-release ; then
  # Centos4
  cat /etc/redhat-release | grep CentOS | grep 4 >& /dev/null
  if test "$?" = "0"; then
    build_vendor="centos4"
    host_vendor="centos4"
    if test "x$host" = "xi686-redhat-linux-gnu"; then
      host="Linux-centos4"
    fi
    if test "x$host" = "xx86_64-redhat-linux-gnu"; then
      host="Linux-centos4_x86_64"
    fi
  fi
  # RedHat9
  cat /etc/redhat-release | grep "Red Hat Linux" | grep 9 >& /dev/null
  if test "$?" = "0"; then
    build_vendor="rh9"
    host_vendor="rh9"
    if test "x$host" = "xi686-pc-linux-gnu"; then
      host="Linux-rh9"
    fi
  fi
fi
if test -e /etc/debian_version ; then
  # Debian3
  cat /etc/debian_version | grep 3 >& /dev/null
  if test "$?" = "0"; then
    build_vendor="debian3"
    host_vendor="debian3"
    if test "x$host" = "xi686-unknown-linux-gnu"; then
      host="Linux-debian3"
    fi
    if test "x$host" = "xx86_64-unknown-linux-gnu"; then
      host="Linux-debian3_x86_64"
    fi
  fi
fi
if test -d /etc/susehelp.d ; then
  # SuSE
  build_vendor="suse"
  host_vendor="suse"
  if test "x$host" = "xia64-unknown-linux-gnu"; then
    host="Linux-suse-ia64"
  fi
fi
AC_SUBST(build_vendor)
AC_SUBST(host_vendor)
AC_SUBST(host)
AM_INIT_AUTOMAKE(tar-ustar)
AC_CONFIG_SRCDIR([config.h.in])
AM_CONFIG_HEADER([config.h])

#####################################################################
# if CFLAGS and CXXFLAGS are not already set, then set to empty,
# otherwise, AC_PROG_CPP and AC_PROG_CXX will automatically append
# "-g -O2", flags over which we'd rather have explicit control per OS
#####################################################################
if test "x$CFLAGS" = "x"; then
  CFLAGS=""
  AC_SUBST(CFLAGS)
fi
if test "x$CXXFLAGS" = "x"; then
  CXXFLAGS=""
  AC_SUBST(CXXFLAGS)
fi

###############################################################
# Checks for programs.
###############################################################
AC_PROG_CXX
AC_PROG_AWK
AC_PROG_CC
AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_LIBTOOL
AC_LIBTOOL_CXX
AC_PROG_F77
if test "x$F77" = "x"; then
  AC_MSG_ERROR([FATAL: A Fortran compiler is required!])
fi

if test "x$F77" = "x"; then
	AC_MSG_ERROR([FATAL: A Fortran compiler is required!])
fi

################################################################
# Checks for header files.
################################################################
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS([\
  arpa/inet.h \
  fcntl.h \
  float.h \
  limits.h \
  locale.h \
  malloc.h \
  memory.h \
  netdb.h \
  netinet/in.h \
  stddef.h \
  stdlib.h \
  string.h \
  strings.h \
  sys/file.h \
  sys/ioctl.h \
  sys/param.h \
  sys/socket.h \
  sys/time.h \
  sys/timeb.h \
  unistd.h \
  values.h \
  wctype.h])
# the following is needed on Mac OS Darwin
AC_CHECK_HEADERS(sys/types.h stdint.h)

################################################################
# Checks for typedefs, structures, and compiler characteristics.
################################################################
AC_C_CONST
AC_C_INLINE
AC_TYPE_MODE_T
AC_TYPE_OFF_T
AC_TYPE_SIZE_T
AC_HEADER_TIME
AC_STRUCT_TM
AC_CHECK_TYPES([ptrdiff_t])

################################################################
# Checks for library functions.
# autoscan says freesurfer uses these:
################################################################
AC_FUNC_CLOSEDIR_VOID
AC_FUNC_ERROR_AT_LINE
AC_FUNC_LSTAT
AC_FUNC_LSTAT_FOLLOWS_SLASHED_SYMLINK
AC_FUNC_MMAP
AC_FUNC_SELECT_ARGTYPES
AC_TYPE_SIGNAL
AC_FUNC_STAT
AC_FUNC_STRTOD
AC_FUNC_VPRINTF
AC_C_VOLATILE
AC_FUNC_FORK
#AC_FUNC_MALLOC (can redefine malloc as rpl_malloc)
AC_FUNC_MEMCMP
#AC_FUNC_REALLOC
AC_HEADER_STDBOOL
AC_TYPE_PID_T
# autoscan says freesurfer uses these functions:
AC_CHECK_FUNCS([\
  bzero \
  calloc \
  dup2 \
  floor \
  ftime \
  getdelim \
  getenv \
  getcwd \
  getpagesize \
  gettimeofday \
  isascii \
  memmove \
  memset \
  mkdir \
  munmap \
  pow \
  putenv \
  rint \
  select \
  setenv \
  sqrt \
  strcasecmp \
  strchr \
  strcspn \
  strdup \
  strerror \
  strncasecmp \
  strrchr \
  strspn \
  strstr \
  strtol \
  uname])

# many systems dont have libg2c.so, the shared lib supporting g77, so build
# using the static lib if available, so that distro is more widely compatible.
# the talairach_avi/Makefile.am file uses LIB_G2C_A
LIB_G2C_A=""
if test -e /usr/local/lib/libg2c.a ; then
  LIB_G2C_A="/usr/local/lib/libg2c.a"
fi
if test -e /usr/lib/libg2c.a ; then
  LIB_G2C_A="/usr/lib/libg2c.a"
fi
if test -e /usr/lib64/libg2c.a ; then
  LIB_G2C_A="/usr/lib64/libg2c.a"
fi
if test "$host" = "powerpc64-suse-linux"; then
  if test -e /usr/lib/libg2c.a ; then
    LIB_G2C_A="/usr/lib/libg2c.a"
  fi
fi
AC_SUBST(LIB_G2C_A)


################################################################
# Most of our scripts use /bin/tcsh, so make sure it exists
################################################################
AC_CHECK_FILE(/bin/tcsh,[],
  [AC_MSG_ERROR([FATAL: /bin/tcsh is required!])])

# links with g++ rather than gcc (and for Intel Compiler, use icpc)
CCLD=g++
if test "x$CC" = "xicc"; then
  CCLD=icpc
fi
AC_SUBST(CCLD)

# two programs used for compress/decompress files
# cannot make AC_MSG_ERROR work inside the AC_CHECK_PROG so
# that I took it out.
AC_CHECK_PROG([HAS_ZCAT],[zcat],[1],[])
if test ! "$HAS_ZCAT" = "1"; then
  AC_MSG_ERROR([FATAL: zcat is required in handling mgz etc. \
Put it in the path.])
fi

AC_CHECK_PROG([HAS_GZIP],[gzip],[1],[])
if test ! "$HAS_GZIP" = "1"; then
  AC_MSG_ERROR([FATAL: gzip is required in creating mgz etc. \
Put it in the path.])
fi

################################################################
# set platform related variable defaults for (Teem) NrrdIO
# in utils
################################################################
TEEM_DIO=0
TEEM_32BIT=1
TEEM_ENDIAN=4321
TEEM_QNANHIBIT=1
AC_SUBST(TEEM_DIO)
AC_SUBST(TEEM_QNANHIBIT)

################################################################
# define OS
################################################################
AC_C_BIGENDIAN_CROSS
echo "byte order is " $BYTEORDER
AC_SUBST(BYTEORDER)
TEEM_ENDIAN=$BYTEORDER

# Support for files >2GB (Large File Support)
LFS_CFLAGS="-D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE"

# -Wno-unknown-pragmas suppresses warnings about unknown gcc pragmas,
# like pragma indent
NUPRAG="-Wno-unknown-pragmas"

# some freesurfer code operates on pointers such that this  warning message
# is issued with gcc 4.1:
# "warning: dereferencing type-punned pointer will break strict-aliasing rules"
# the -fno-strict-aliasing flag disables optimizations that would otherwise
# require the code to comply with the strict aliasing rules
NSALIASING="-fno-strict-aliasing"

# Freesurfer should compile with -Wall (which enables all warnings)
# and -Werror (which escalates warnings to errors, thus stopping the build),
# but here we allow a bypass:
WALL="-Wall"
WERROR="-Werror"
AC_ARG_ENABLE(Wall,
 [  --disable-Wall          do not add -Wall to compiler flags],
 [ WALL="" ],
 [ WALL="-Wall" ])
AC_ARG_ENABLE(Werror,
 [  --disable-Werror        do not add -Werror to compiler flags],
 [ WERROR="" ],
 [ WERROR="-Werror" ])
# the Intel C/C++ compiler complains about *a lot* of stuff, so escalating
# warnings to errors (which stops the build) is not an option right now
if test "x$CC" = "xicc"; then
  WERROR=""
fi

# to strip unused code when using Linux gcc:
#DEADCODE_STRIP="-ffunction-sections -Wl,--gc-sections"
# does not work in scuba2! so leave empty:
DEADCODE_STRIP=""
# and on the Mac:
DEADCODE_STRIP_MAC="-dead_strip"

# Leopard needs this
FCLIBS=""

AC_MSG_NOTICE(Setting OS from target...)
case "${target}" in
 i*86-*-linux-gnu*)
 OS=Linux
 OS_CPPFLAGS="$DEADCODE_STRIP"
 OS_LDFLAGS="$DEADCODE_STRIP"
 DYNAMIC_LIB_EXT=".so"
 SHARED_CFLAGS="-fPIC "
 SHARED_LDFLAGS="-shared "
 CPPFLAGS="-g -O2 $NSALIASING $WALL $WERROR $LFS_CFLAGS"
 ;;
 x86_64-*)
 OS=Linux
 OS_CPPFLAGS="$DEADCODE_STRIP"
 OS_LDFLAGS="$DEADCODE_STRIP"
 LDFLAGS="-L/usr/lib64 -L/usr/X11R6/lib64 $LDFLAGS"
 DYNAMIC_LIB_EXT=".so"
 SHARED_CFLAGS="-fPIC"
 SHARED_LDFLAGS="-shared"
 CPPFLAGS="-g -O2 $NSALIASING $WALL $WERROR"
 TEEM_32BIT=0
 ;;
 ia64-*)
 OS=Linux
 OS_CPPFLAGS=
 OS_LDFLAGS=
 DYNAMIC_LIB_EXT=".so"
 SHARED_CFLAGS="-fPIC"
 SHARED_LDFLAGS="-shared"
 CPPFLAGS="-g -O2 $NSALIASING $WALL $WERROR $LFS_CFLAGS"
 TEEM_32BIT=0
 ;;
 *-apple-darwin*)
 # Mac OS X
 OS=Darwin
 OS_CPPFLAGS=
 OS_LDFLAGS="$DEADCODE_STRIP_MAC"
 DYNAMIC_LIB_EXT=".dylib"
 SHARED_CFLAGS="-fno-common"
 SHARED_LDFLAGS="-dynamiclib"
 CPPFLAGS="-gfull -O2 $NSALIASING $WALL $WERROR $LFS_CFLAGS"
 FCLIBS="-L/usr/lib -lgcc"
 ;;
 i*86-*-solaris*)
 OS=SunOS
 OS_CPPFLAGS=
 OS_LDFLAGS=
 DYNAMIC_LIB_EXT=".so"
 SHARED_CFLAGS="-fPIC "
 SHARED_LDFLAGS="-shared "
 CPPFLAGS="-g -O2 $NSALIASING $WALL $WERROR $NUPRAG"
 ;;
 i*86-pc-cygwin)
 OS=Windows_NT
 OS_CPPFLAGS=
 OS_LDFLAGS=
 DYNAMIC_LIB_EXT=
 SHARED_CFLAGS=
 SHARED_LDFLAGS=
 CPPFLAGS="-g -O2 $NSALIASING $WALL $WERROR $NUPRAG"
 ;;
 powerpc64-*-linux-gnu*)
 OS=Linux
 OS_CPPFLAGS="$DEADCODE_STRIP"
 OS_LDFLAGS="$DEADCODE_STRIP"
 DYNAMIC_LIB_EXT=".so"
 SHARED_CFLAGS="-fPIC "
 SHARED_LDFLAGS="-shared "
 CPPFLAGS="-g -O2 $NSALIASING $WALL $WERROR $LFS_CFLAGS"
 ;;
 powerpc64-suse-linux)
 OS=Linux
 OS_CPPFLAGS="$DEADCODE_STRIP"
 OS_LDFLAGS="$DEADCODE_STRIP"
 DYNAMIC_LIB_EXT=".so"
 SHARED_CFLAGS="-fPIC "
 SHARED_LDFLAGS="-shared "
 CPPFLAGS="-g -O2 $NSALIASING $WALL $WERROR $LFS_CFLAGS"
 ;;
esac
AC_SUBST(OS)
AC_SUBST(OS_CPPFLAGS)
AC_SUBST(OS_LDFLAGS)
AC_SUBST(DYNAMIC_LIB_EXT)
AC_SUBST(TEEM_32BIT)
AC_SUBST(TEEM_ENDIAN)

# export
AC_SUBST(SHARED_CFLAGS)
AC_SUBST(SHARED_LDFLAGS)

AC_SUBST(FCLIBS)

AC_MSG_NOTICE(OS is $OS)

AM_CONDITIONAL(HAVE_MAC_OSX, test "x$OS" = "xDarwin" )


##############################################################
# OpenMP
##############################################################
ac_have_openmp=no
AC_ARG_ENABLE(openmp,
 [  --enable-openmp         enable OpenMP multi-core support],
 [ ac_have_openmp=yes
   AC_MSG_NOTICE(Using OpenMP)
   if test "${CC}" = "icc"; then
     CPPFLAGS="-D_OPENMP -openmp $CPPFLAGS"
   else
     CPPFLAGS="-D_OPENMP -fopenmp $CPPFLAGS"
   fi  
 ])
AM_CONDITIONAL(HAVE_OPENMP, test "x$ac_have_openmp" = "xyes")


##############################################################
# cpu optimization
##############################################################
CPUFLAGS=""
if test "${CC}" = "gcc"; then
AC_MSG_NOTICE(Setting CPU optimization...)
CPUTYPE="NO"
####
#### cpu type: we support
####     pentium3, pentium4,
####     athlon-xp, opteron, athlon64, athlon-fx
####
AC_ARG_WITH(cpu,
[  --with-cpu=CPUTYPE      where CPUTYPE is pentium4, athlon-xp, G4, G5...],
  [CPUTYPE=$withval],[])
# --with-cpu not used  automatically figure out
if test "$CPUTYPE" = "NO"; then
  case "$OS" in
  Darwin)
    maccpu=`machine`
    case "$maccpu" in
      ppc750)
      CPUTYPE=G3
      ;;
      ppc7450)
      CPUTYPE=G4
      ;;
      ppc970)
      CPUTYPE=G5
      ;;
      i486)
      CPUTYPE=intel-mac
      ;;
      *)
      CPUTYPE="NO"
      echo "unknown mac cpu $maccpu"
      ;;
      esac
    ;;
  Linux)
    case "${target}" in
    i*86-*-linux-gnu*)
      cpu386=`${srcdir}/x86cpucaps/cpucaps -m | sed 's/ //g'`
      case "$cpu386" in
        PentiumIII*)
        CPUTYPE=pentium3
        ;;
        Pentium4)
        CPUTYPE=pentium4
        ;;
        PentiumM*)
        CPUTYPE=pentium4
        ;;
        AMDAthlonXP*)
        CPUTYPE=athlonxp
        ;;
      esac
      ;;
    x86_64-*)
      cpu386=`${srcdir}/x86cpucaps/cpucaps -m | sed 's/ //g'`
      case "$cpu386" in
        AMDAthlon64)
        CPUTYPE=athlon64
        ;;
        AMDOpteron*)
        CPUTYPE=opteron
        ;;
      esac
      ;;
    powerpc64-*)
      CPUTYPE=powerpc64
      ;;
    ia64-*)
      CPUTYPE=itanium
      ;;
    esac
    ;;
  esac
fi

AC_MSG_NOTICE(CPUTYPE is $CPUTYPE)
AC_MSG_CHECKING(CPU optimization...)

# now set the flags
case "$CPUTYPE" in
  pentium3)
#     CPUFLAGS="-march=pentium3"
     CPUFLAGS=""
     ;;
  pentium4)
#     CPUFLAGS="-march=pentium4"
     CPUFLAGS=""
     ;;
  athlonxp)
#     CPUFLAGS="-march=pentium3"
     CPUFLAGS=""
     ;;
  opteron)
#     CPUFLAGS="-march=x86-64"
     CPUFLAGS="-m64"
     ;;
  itanium)
     CPUFLAGS="-mtune=itanium2"
     ;;
  athlon64)
#     CPUFLAGS="-march=x86-64"
     CPUFLAGS="-m64"
     ;;
  athlon-fx)
#     CPUFLAGS="-march=x86-64"
     CPUFLAGS="-m64"
     ;;
  G4)
     CPUFLAGS="-mtune=G4 -mcpu=G4 -faltivec"
     ;;
  G5)
     # maintain G4 backwards compatibility
     CPUFLAGS="-mtune=G4 -mcpu=G4 -faltivec"
     ;;
  power4)
     CPUFLAGS="-mtune=power4 -mcpu=power4"
     ;;
  power5)
     CPUFLAGS="-mtune=power5 -mcpu=power5"
     ;;
  powerpc64)
     CPUFLAGS="-mpowerpc64 -m32"
     ;;
  intel-mac)
     CPUFLAGS="-fast"
     ;;
  *)
     echo "cpu optimization not set"
     ;;
esac

found=$CPUFLAGS
# set the value

AC_MSG_RESULT($found)

#####
# if gcc
fi

# if using the Intel compiler, enable additional interprocedural 
# optimizations for single file compilation, and generate  SSE3, SSE2, and 
# SSE instructions, and enable auto-parallelization. 
if test "x$CC" = "xicc"; then
  AC_MSG_NOTICE(Setting Intel Compiler optimizations...)
  CPUFLAGS="-ip -axP -parallel -O3 $CPUFLAGS"
fi

###############################################################
# verify that CPUFLAGS work
###############################################################
ac_save_CFLAGS=$CFLAGS
CFLAGS="$CPUFLAGS $CFLAGS"
echo "$as_me:$LINENO: checking whether $CC accepts $CPUFLAGS" >&5
echo $ECHO_N "checking whether $CC accepts $CPUFLAGS... $ECHO_C" >&6
if test "${ac_cv_prog_cc_cpuflags+set}" = set; then
  echo $ECHO_N "(cached) $ECHO_C" >&6
else
  cat >conftest.$ac_ext <<_ACEOF
#line $LINENO "configure"
/* confdefs.h.  */
_ACEOF
cat confdefs.h >>conftest.$ac_ext
cat >>conftest.$ac_ext <<_ACEOF
/* end confdefs.h.  */

int
main ()
{

  ;
  return 0;
}
_ACEOF
rm -f conftest.$ac_objext
if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
  (eval $ac_compile) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); } &&
         { ac_try='test -s conftest.$ac_objext'
  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
  (eval $ac_try) 2>&5
  ac_status=$?
  echo "$as_me:$LINENO: \$? = $ac_status" >&5
  (exit $ac_status); }; }; then
  ac_cv_prog_cc_cpuflags=yes
else
  echo "$as_me: failed program was:" >&5
sed 's/^/| /' conftest.$ac_ext >&5

ac_cv_prog_cc_cpuflags=no
fi
rm -f conftest.$ac_objext conftest.$ac_ext
fi

echo "$as_me:$LINENO: result: $ac_cv_prog_cc_cpuflags" >&5
echo "${ECHO_T}$ac_cv_prog_cc_cpuflags" >&6

if test $ac_cv_prog_cc_cpuflags = no; then
 AC_MSG_NOTICE([$CC on this PC cannot accept $CPUFLAGS. $CC may be too old?])
 CPUFLAGS=""
fi
# write the flag file
echo "CPUFLAGS=$CPUFLAGS" > cpuflags.mak

CFLAGS=$ac_save_CFLAGS

# append these CPUFLAGS to our existing CPPFLAGS
CPPFLAGS="$CPPFLAGS $CPUFLAGS"


##############################################################
# This macro figures out how to build C programs using
# POSIX threads.
##############################################################
if test ! "$OS" = "SunOS"; then
  ACX_PTHREAD
fi

##############################################################
# get the path for X includes and X libraries
##############################################################
AC_PATH_X

if test "x$x_includes" = "xNONE"; then
  # Mac sets it to NONE, but this is really ""
  x_includes=
fi
if test "x$x_includes" = "x"; then
  x_includes=/usr/X11R6/include
fi
AC_MSG_NOTICE([x_includes set to $x_includes  \
If not correct specify using --x-includes=])

# the path to the X libs is not always defined, so find it...
if test "x$x_libraries" = "xNONE"; then
  # Mac sets empty to NONE, we want ""
  x_libraries=
fi
if test "x$x_libraries" = "x"; then
  # most common location
  if test -d "/usr/X11R6/lib" ; then
    x_libraries=/usr/X11R6/lib
  fi
  # replace with lib64 if that exists
  if test -d "/usr/X11R6/lib64" ; then
    x_libraries=/usr/X11R6/lib64
  fi
fi
AC_MSG_NOTICE([x_libraries set to $x_libraries  \
If not correct specify using --x-libraries=])

# find two necessary X libs
if test ! "x$x_libraries" = "x"; then
  AC_CHECK_LIB([X11 -L$x_libraries],[XOpenDisplay],
                    [X_LIBS="$X_LIBS -L$x_libraries -lX11"],[])
  AC_CHECK_LIB([Xmu -L$x_libraries],[XmuClientWindow],
                    [X_LIBS="$X_LIBS -L$x_libraries -lXmu"],[])
fi
AC_SUBST(X_LIBS)

##############################################################
# allow user to specify root of multi-package directory,
# such as one containing all freesurfer dependencies.
##############################################################
ac_pkgs_includes="NO"
ac_pkgs_libraries="NO"
pkgs_includes=""
pkgs_libraries=""

AC_ARG_WITH(pkgs-dir,
[  --with-pkgs-dir=DIR     where the root of multiple pkgs are installed.],
  [  ac_pkgs_includes="$withval"/include
     ac_pkgs_libraries="$withval"/lib
  ])

# modify CPPFLAGS and LDFLAGS
if test ! "$ac_pkgs_includes" = "NO"; then
  AC_MSG_RESULT([Packages directory is $withval])
  pkgs_includes=-I$ac_pkgs_includes
  CPPFLAGS="$CPPFLAGS $pkgs_includes"
fi
if test ! "$ac_pkgs_libraries" = "NO"; then
  pkgs_libraries=-L$ac_pkgs_libraries
  LDFLAGS="$LDFLAGS $pkgs_libraries"
fi

AC_SUBST(pkgs_includes)
AC_SUBST(pkgs_libraries)


AC_MSG_NOTICE([Checking for directory specification of 3rd-party libraries...])

#############################################################
# MNI
#############################################################
ac_mni_includes=NO
ac_mni_libraries=NO
MNI_CFLAGS=""
MNI_LIBS=""
MNI_DIR=""
AC_MSG_CHECKING(MNI directory)

AC_ARG_WITH(mni-dir,
[  --with-mni-dir=DIR      where the root of MNI is installed.],
  [  ac_mni_includes="$withval"/include
     ac_mni_libraries="$withval"/lib
     MNI_DIR="$withval"
  ])

if test ! "$ac_mni_includes" = "NO"; then
  AC_MSG_RESULT(MNI directory is $withval)
  MNI_CFLAGS=-I$ac_mni_includes
else
  AC_MSG_RESULT(MNI directory is not supplied)
fi

if test ! "$ac_mni_libraries" = "NO"; then
  MNI_LIBS=-L$ac_mni_libraries
fi

# these are the libs used by freesurfer:
LIBS_MNI="-lnetcdf -lvolume_io -lminc"

AC_SUBST(MNI_CFLAGS)
AC_SUBST(MNI_LIBS)
AC_SUBST(MNI_DIR)
AC_SUBST(LIBS_MNI)


################################################################
# NIfTI
################################################################
ac_nifti_includes="NO"
ac_nifti_libraries="NO"
ac_nifti_bindir="NO"
ac_nifti_dir="NO"
NIFTI_CFLAGS=""
NIFTI_LIBS=""
NIFTI_LIB=""
NIFTI_DIR=""
LIBS_NIFTI=""

AC_MSG_CHECKING(NIfTI directory)

AC_ARG_WITH(nifti-dir,
  [  --with-nifti-dir=DIR    where the root of NIfTI is installed.],
  [  ac_nifti_includes="$withval"/include
     ac_nifti_libraries="$withval"/lib
     ac_nifti_bindir="$withval"/bin
     ac_nifti_dir="$withval"
  ])

AC_ARG_WITH(nifti-include,
  [  --with-nifti-include=DIR    root of NIfTI include directory.],
  [  ac_nifti_includes="$withval"
  ])

AC_ARG_WITH(nifti-libraries,
  [  --with-nifti-libraries=DIR  root of NIfTI lib directory.],
  [  ac_nifti_libraries="$withval"
  ])

if test ! "$ac_nifti_includes" = "NO"; then
  AC_MSG_RESULT(NIfTI directory is $withval)
  NIFTI_CFLAGS=-I$ac_nifti_includes
  NIFTI_DIR=$ac_nifti_dir
else
  AC_MSG_RESULT(NIfTI directory is not supplied)
fi

if test ! "$ac_nifti_libraries" = "NO"; then
  NIFTI_LIB=$ac_nifti_libraries
  NIFTI_LIBS=-L$ac_nifti_libraries
fi

AC_SUBST(NIFTI_CFLAGS)
AC_SUBST(NIFTI_LIBS)
AC_SUBST(NIFTI_LIB)
AC_SUBST(NIFTI_DIR)

AM_CONDITIONAL(HAVE_NIFTI_LIBS, ! test "x$ac_nifti_dir" = "xNO")

################################################################
# VXL
################################################################
ac_vxl_includes="NO"
ac_vxl_libraries="NO"
VXL_CFLAGS=""
VXL_LIBS=""
VXL_LIB=""
AC_MSG_CHECKING(VXL directory)

AC_ARG_WITH(vxl-dir,
  [  --with-vxl-dir=DIR      where the root of VXL is installed.],
  [  # v1.7.0 has new vxl dir, earlier versions do not!
     if test -d "$withval/include/vxl"; then
        vxl_i="$withval/include/vxl"
     else
        vxl_i="$withval/include"
     fi
     ac_vxl_includes="$vxl_i/core $vxl_i/vcl $vxl_i/v3p/netlib $vxl_i/v3p/netlib/opt"
     ac_vxl_libraries="$withval"/lib
     VXL_DIR="$withval"
     AC_SUBST(VXL_DIR)
  ])

AC_ARG_WITH(vxl-include,
  [  --with-vxl-include=DIR      root of VXL include directory.],
  [  if test -d "$withval/include/vxl"; then
        vxl_i="$withval/include/vxl"
     else
        vxl_i="$withval/include"
     fi
     ac_vxl_includes="$vxl_i/core $vxl_i/vcl $vxl_i/v3p/netlib $vxl_i/v3p/netlib/opt"
  ])

AC_ARG_WITH(vxl-libraries,
  [  --with-vxl-libraries=DIR    root of VXL lib directory.],
  [  ac_vxl_libraries="$withval"
  ])

if test ! "$ac_vxl_includes" = "NO"; then
  AC_MSG_RESULT(VXL directory is $withval)
  for item in $ac_vxl_includes; do
      VXL_CFLAGS="${VXL_CFLAGS} -I${item}"
  done
else
  AC_MSG_RESULT(VXL directory is not supplied)
fi

if test ! "$ac_vxl_libraries" = "NO"; then
  VXL_LIBS=-L$ac_vxl_libraries
  VXL_LIB=$ac_vxl_libraries
fi

# these are the VXL libs used by freesurfer:
LIBS_VXL="-lvnl_algo -lvnl -lvcl -lnetlib -lv3p_netlib"

AC_SUBST(VXL_CFLAGS)
AC_SUBST(VXL_LIBS)
AC_SUBST(VXL_LIB)
AC_SUBST(LIBS_VXL)


################################################################
# PETSc
################################################################
ac_petsc_includes="NO"
ac_petsc_libraries="NO"
ac_petsc_bindir="NO"
ac_petsc_dir="NO"
PETSC_CFLAGS=""
PETSC_LIBS=""
PETSC_LIB=""
PETSC_DIR=""
LIBS_PETSC=""

AC_MSG_CHECKING(PETSc directory)

AC_ARG_WITH(petsc-dir,
  [  --with-petsc-dir=DIR    where the root of PETSc is installed.],
  [  ac_petsc_includes="$withval"/include
     ac_petsc_libraries="$withval"/lib
     ac_petsc_bindir="$withval"/bin
     ac_petsc_dir="$withval"
  ])

AC_ARG_WITH(petsc-include,
  [  --with-petsc-include=DIR    root of PETSc include directory.],
  [  ac_petsc_includes="$withval"
  ])

AC_ARG_WITH(petsc-libraries,
  [  --with-petsc-libraries=DIR  root of PETSc lib directory.],
  [  ac_petsc_libraries="$withval"
  ])

if test ! "$ac_petsc_includes" = "NO"; then
  AC_MSG_RESULT(PETSc directory is $withval)
  PETSC_CFLAGS=-I$ac_petsc_includes
  PETSC_DIR=$ac_petsc_dir
else
  AC_MSG_RESULT(PETSc directory is not supplied)
fi

if test ! "$ac_petsc_libraries" = "NO"; then
  PETSC_LIB=$ac_petsc_libraries
  PETSC_LIBS=-L$ac_petsc_libraries
fi

AC_SUBST(PETSC_CFLAGS)
AC_SUBST(PETSC_LIBS)
AC_SUBST(PETSC_LIB)
AC_SUBST(PETSC_DIR)

AM_CONDITIONAL(HAVE_PETSC_LIBS, ! test "x$ac_petsc_dir" = "xNO")


##########################################################
# Catch-all flag to enable Tcl/Tk, ITK and KWW apps
##########################################################
tcltk_apps="NO"
itk_apps="NO"
kww_apps="NO"
AC_ARG_ENABLE(all-apps,
 [  --enable-all-apps       enable building Tcl/Tk, ITK, VTK/KWWidgets, wxWidgets and OpenGL-based apps],
 [ tcltk_apps="yes"
   itk_apps="yes"
   kww_apps="yes"
   wxw_apps="yes"
   need_opengl="yes"
 ])

####################################################
# Tcl/Tk
####################################################
ac_tcl_includes="NO"
ac_tcl_libraries="NO"
TCL_CFLAGS=""
TCL_LIBS=""
TCL_LIB=""
TCL_DIR=""

AC_MSG_CHECKING(Tcl/Tk config)

AC_ARG_WITH(tcl-dir,
[  --with-tcl-dir=DIR      where the root of Tcl/Tk is installed.],
  [  ac_tcl_includes="$withval"/include
     ac_tcl_libraries="$withval"/lib
     ac_tcl_dir="$withval"
  ])

AC_ARG_WITH(tcl-include,
  [  --with-tcl-include=DIR      root of Tcl/Tk include directory.],
  [  ac_tcl_includes="$withval"
  ])

AC_ARG_WITH(tcl-libraries,
  [  --with-tcl-libraries=DIR    root of Tcl/Tk lib directory.],
  [  ac_tcl_libraries="$withval"
  ])

if test ! "$ac_tcl_includes" = "NO"; then
  AC_MSG_RESULT([Tcl directory is $withval])
  TCL_CFLAGS=-I$ac_tcl_includes
fi

if test ! "$ac_tcl_libraries" = "NO"; then
  TCL_LIBS=-L$ac_tcl_libraries
  TCL_LIB=$ac_tcl_libraries
  TCL_DIR=$ac_tcl_dir
  tcltk_apps="yes"
fi

AC_ARG_ENABLE(tcltk-apps,
 [  --enable-tcltk-apps     enable building Tcl/Tk-based apps],
 [ tcltk_apps="yes"
 ])

if test "$tcltk_apps" = "yes"; then
  AC_MSG_RESULT([Enabled building of Tcl/Tk apps.])
  # enable testing for OpenGL libs:
  need_opengl=yes
else
  AC_MSG_RESULT([Not building Tcl/Tk apps.])
fi

AM_CONDITIONAL(ENABLE_TCLTK_APPS, test "$tcltk_apps" = "yes")

AC_SUBST(TCL_CFLAGS)
AC_SUBST(TCL_LIBS)
AC_SUBST(TCL_LIB)
AC_SUBST(LIBS_TCL)
AC_SUBST(TCL_DIR)


##################################################################
# allow user to specify tixwish
AC_ARG_WITH(tixwish,
[  --with-tixwish=TIXWISH  where you specify the file for tixwish],
  [TIXWISH=$withval],[])
# if TIXWISH has been set, then it does not do anything
AC_PATH_PROG([TIXWISH],[tixwish],[])
if test "x$TIXWISH" = "x"; then
  AC_PATH_PROG([TIXWISH],[tixwish8.1.8.3],[])
  if test "x$TIXWISH" = "x"; then
    AC_PATH_PROG([TIXWISH],[tixwish8.1.8.4],[])
  fi
fi
# well check
if test "x$TIXWISH" = "x"; then
if test ! "x$tcltk_apps" = "xNO"; then
  AC_MSG_RESULT([INFO: tixwish not found. Use --with-tixwish=... to specify])
fi
fi

AC_SUBST(TIXWISH)


################################################################
# BLT
################################################################
ac_blt_includes="NO"
ac_blt_libraries="NO"
ac_blt_bindir="NO"
BLT_CFLAGS=""
BLT_LIBS=""
if test "$OS" = "SunOS"; then
  BLT_LIBS="-lm "
fi
AC_MSG_CHECKING(BLT directory)

AC_ARG_WITH(BLT-dir,
[  --with-BLT-dir=DIR      where the root of BLT is installed.],
  [  ac_blt_includes="$withval"/include
     ac_blt_libraries="$withval"/lib
     ac_blt_bindir="$withval"/bin
  ])

if test ! "$ac_blt_includes" = "NO"; then
  AC_MSG_RESULT(BLT directory is $withval)
  BLT_CFLAGS=-I$ac_blt_includes
else
  AC_MSG_RESULT(BLT directory is not supplied)
fi
if test ! "$ac_blt_libraries" = "NO"; then
  BLT_LIBS=-L$ac_blt_libraries
fi

TCL_CFLAGS="$BLT_CFLAGS $TCL_CFLAGS"
AC_SUBST(TCL_CFLAGS)
AC_SUBST(BLT_CFLAGS)
AC_SUBST(BLT_LIBS)


################################################################
# KWWidgets
################################################################
ac_kwwidgets_includes="NO"
ac_kwwidgets_libraries="NO"
ac_kwwidgets_dir="NO"
KWWIDGETS_CFLAGS=""
KWWIDGETS_CXXFLAGS=""
KWWIDGETS_LIBS=""

AC_MSG_CHECKING(KWWidgets config)

AC_ARG_WITH(kwwidgets-dir,
  [  --with-kwwidgets-dir=DIR where the root of KWWidgets is installed.],
  [  ac_kwwidgets_includes="$withval"/include/KWWidgets
     ac_kwwidgets_libraries="$withval"/lib/KWWidgets
     ac_kwwidgets_dir="$withval"
  ])

if test ! "$ac_kwwidgets_includes" = "NO"; then
  AC_MSG_RESULT(KWWidgets directory is $withval)
  for item in $ac_kwwidgets_includes; do
    KWWIDGETS_CFLAGS="${KWWIDGETS_CFLAGS} -I${item}"
    KWWIDGETS_CXXFLAGS="${KWWIDGETS_CXXFLAGS} -I${item}"
  done
  KWWIDGETS_DIR=$ac_kwwidgets_dir
  AC_SUBST(KWWIDGETS_DIR)
  kww_apps="yes"
fi

if test ! "$ac_kwwidgets_libraries" = "NO"; then
  for item in $ac_kwwidgets_libraries; do
    KWWIDGETS_LIBS="${KWWIDGETS_LIBS} -L${item}"
  done
  KWWIDGETS_LIBS="${KWWIDGETS_LIBS}"
  AC_SUBST(KWWIDGETS_DIR)
fi

AC_ARG_ENABLE(kww-apps,
 [  --enable-kww-apps       enable building KWWidgets-based apps],
 [ kww_apps="yes"
 ])

if test "$kww_apps" = "yes"; then
  AC_MSG_RESULT([Enabled building of KWWidgets apps.])
  # enable testing for OpenGL libs:
  need_opengl=yes
else
  AC_MSG_RESULT([Not building KWWidgets apps.])
fi

AM_CONDITIONAL(ENABLE_KWWIDGETS_APPS, test "$kww_apps" = "yes")

AC_SUBST(KWWIDGETS_CFLAGS)
AC_SUBST(KWWIDGETS_CXXFLAGS)
AC_SUBST(KWWIDGETS_LIBS)


################################################################
# wxWidgets
################################################################
WXWIDGETS_CFLAGS=""
WXWIDGETS_CXXFLAGS=""
WXWIDGETS_LIBS=""
WXWIDGETS_DIR=""

AC_MSG_CHECKING(wxWidgets config)

AC_ARG_WITH(wxwidgets-dir,
  [  --with-wxwidgets-dir=DIR where the root of wxWidgets is installed.],
  [  WXWIDGETS_DIR="$withval" 
     wxw_apps="yes"
  ])

if test "x$WXWIDGETS_DIR" = "x"; then
  # if a wxWidgets root was not supplied, but one exists in the
  # default packages path at the NMR Center, then use that:
  if test -d "/usr/pubsw/packages/wxWidgets/current" ; then
    WXWIDGETS_DIR=/usr/pubsw/packages/wxWidgets/current
    wxw_apps="yes"
  fi
fi

# use the handy wx-config utility to get the compiler and linker flags
if test ! "x$WXWIDGETS_DIR" = "x"; then
  WXCONFIG="${WXWIDGETS_DIR}/bin/wx-config"
  WXWIDGETS_CFLAGS="`${WXCONFIG} --cflags`"
  WXWIDGETS_CXXFLAGS="`${WXCONFIG} --cxxflags`"
  WXWIDGETS_LIBS="`${WXCONFIG} --libs`"

  # except wx-config isn't so handy in including some header paths on Linux:
  if test -d /usr/include/gtk-2.0 ; then
  WXWIDGETS_GTK_CFLAGS="-D__WXGTK20__"
  WXWIDGETS_GTK_CFLAGS="$WXWIDGETS_GTK_CFLAGS	-I/usr/include/gtk-2.0"
  WXWIDGETS_GTK_CFLAGS="$WXWIDGETS_GTK_CFLAGS	-I/usr/lib/gtk-2.0/include"
  WXWIDGETS_GTK_CFLAGS="$WXWIDGETS_GTK_CFLAGS	-I/usr/lib64/gtk-2.0/include"
  WXWIDGETS_GTK_CFLAGS="$WXWIDGETS_GTK_CFLAGS	-I/usr/include/glib-2.0"
  WXWIDGETS_GTK_CFLAGS="$WXWIDGETS_GTK_CFLAGS	-I/usr/lib/glib-2.0/include"
  WXWIDGETS_GTK_CFLAGS="$WXWIDGETS_GTK_CFLAGS	-I/usr/lib64/glib-2.0/include"
  WXWIDGETS_GTK_CFLAGS="$WXWIDGETS_GTK_CFLAGS	-I/usr/include/pango-1.0"
  WXWIDGETS_GTK_CFLAGS="$WXWIDGETS_GTK_CFLAGS	-I/usr/include/cairo"
  WXWIDGETS_GTK_CFLAGS="$WXWIDGETS_GTK_CFLAGS	-I/usr/include/atk-1.0"
  WXWIDGETS_CFLAGS="$WXWIDGETS_CFLAGS	$WXWIDGETS_GTK_CFLAGS"
  WXWIDGETS_CXXFLAGS="$WXWIDGETS_CXXFLAGS	$WXWIDGETS_GTK_CFLAGS"
  fi
fi

AC_ARG_ENABLE(wxw-apps,
 [  --enable-wxw-apps       enable building wxWidgets-based apps],
 [ wxw_apps="yes"
 ])

if test "$wxw_apps" = "yes"; then
  AC_MSG_RESULT([Enabled building of wxWidgets apps.])
  # enable testing for OpenGL libs:
  need_opengl=yes
else
  AC_MSG_RESULT([Not building wxWidgets apps.])
fi

AM_CONDITIONAL(ENABLE_WXWIDGETS_APPS, test "$wxw_apps" = "yes")

AC_SUBST(WXWIDGETS_CFLAGS)
AC_SUBST(WXWIDGETS_CXXFLAGS)
AC_SUBST(WXWIDGETS_LIBS)
AC_SUBST(WXWIDGETS_DIR)


################################################################
# XawPlus
################################################################
ac_xawplus_includes="NO"
ac_xawplus_libraries="NO"
ac_xawplus_dir="NO"
xawplus_apps="NO"
XAWPLUS_CFLAGS=""
XAWPLUS_CXXFLAGS=""
XAWPLUS_LIBS=""

AC_MSG_CHECKING(XawPlus config)

AC_ARG_WITH(xawplus-dir,
  [  --with-xawplus-dir=DIR where the root of XawPlus is installed.],
  [  ac_xawplus_includes="$withval"/include
     ac_xawplus_libraries="$withval"/lib
     ac_xawplus_dir="$withval"
  ])

if test ! "$ac_xawplus_includes" = "NO"; then
  AC_MSG_RESULT(XawPlus directory is $withval)
  for item in $ac_xawplus_includes; do
    XAWPLUS_CFLAGS="${XAWPLUS_CFLAGS} -I${item}"
    XAWPLUS_CXXFLAGS="${XAWPLUS_CXXFLAGS} -I${item}"
  done
  XAWPLUS_DIR=$ac_xawplus_dir
  AC_SUBST(XAWPLUS_DIR)
  xawplus_apps="yes"
fi

if test ! "$ac_xawplus_libraries" = "NO"; then
  for item in $ac_xawplus_libraries; do
    XAWPLUS_LIBS="${XAWPLUS_LIBS} -L${item}"
  done
  XAWPLUS_LIBS="${XAWPLUS_LIBS}"
  AC_SUBST(XAWPLUS_DIR)
fi

AC_ARG_ENABLE(xawplus-apps,
 [  --enable-xawplus-apps   enable building XawPlus-based apps],
 [ xawplus_apps="yes"
 ])

if test "$xawplus_apps" = "yes"; then
  AC_MSG_RESULT([Enabled building of XawPlus apps.])
  # enable testing for OpenGL libs:
  need_opengl=yes
fi

AM_CONDITIONAL(ENABLE_XAWPLUS_APPS, test "$xawplus_apps" = "yes")

AC_SUBST(XAWPLUS_CFLAGS)
AC_SUBST(XAWPLUS_CXXFLAGS)
AC_SUBST(XAWPLUS_LIBS)


################################################################
# tiff
################################################################
# default is to use the libtiff included in freesurfer src tree,
# local libtiff static lib declared later in LIBS_MGH.
# allow someone to override with their own using --with-tiff-dir:
ac_tiff_includes="NO"
ac_tiff_libraries="NO"
ac_tiff_bindir="NO"
TIFF_CFLAGS=""
TIFF_LIBS=""
LIB_TIFF=""
AC_MSG_CHECKING(Tiff directory)

AC_ARG_WITH(tiff-dir,
[  --with-tiff-dir=DIR     where the root of Tiff is installed.],
  [  ac_tiff_includes="$withval"/include
     ac_tiff_libraries="$withval"/lib
     ac_tiff_bindir="$withval"/bin
  ])

if test ! "$ac_tiff_includes" = "NO"; then
  AC_MSG_RESULT(Tiff directory is $withval)
  TIFF_CFLAGS=-I$ac_tiff_includes
else
  AC_MSG_RESULT(Tiff directory is not supplied)
fi
if test ! "$ac_tiff_libraries" = "NO"; then
  TIFF_LIBS=-L$ac_tiff_libraries
  LIB_TIFF="-ltiff"
fi

AM_CONDITIONAL(USE_LOCAL_TIFF, test "$ac_tiff_libraries" = "NO")

AC_SUBST(TIFF_CFLAGS)
AC_SUBST(TIFF_LIBS)
AC_SUBST(LIB_TIFF)


################################################################
# jpeg
################################################################
# default is to use the libjpeg included in freesurfer src tree,
# allow someone to override with their own using --with-jpeg-dir.
# local libjpeg static lib declared later in LIBS_MGH:
ac_jpeg_includes="NO"
ac_jpeg_libraries="NO"
ac_jpeg_bindir="NO"
JPEG_CFLAGS=""
JPEG_LIBS=""
LIB_JPEG="-ljpeg"
AC_MSG_CHECKING(Jpeg directory)

AC_ARG_WITH(jpeg-dir,
  [  --with-jpeg-dir=DIR     where the root of Jpeg is installed.],
  [  ac_jpeg_includes="$withval"/include
     ac_jpeg_libraries="$withval"/lib
     ac_jpeg_bindir="$withval"/bin
  ])

if test ! "$ac_jpeg_includes" = "NO"; then
  AC_MSG_RESULT(Jpeg directory is $withval)
  JPEG_CFLAGS=-I$ac_jpeg_includes
else
  AC_MSG_RESULT(Jpeg directory is not supplied)
fi
if test ! "$ac_jpeg_libraries" = "NO"; then
  JPEG_LIBS=-L$ac_jpeg_libraries
fi

# use static lib if found
if test -e "$ac_tcl_libraries/libjpeg.a"; then
  LIB_JPEG="$ac_tcl_libraries/libjpeg.a"
fi
if test -e "/usr/lib/libjpeg.a"; then
  LIB_JPEG="/usr/lib/libjpeg.a"
fi
if test -e "/usr/lib64/libjpeg.a"; then
  LIB_JPEG="/usr/lib64/libjpeg.a"
fi
if test -e "/usr/pubsw/packages/tiffjpegglut/current/lib/libjpeg.a"; then
  LIB_JPEG="/usr/pubsw/packages/tiffjpegglut/current/lib/libjpeg.a"
fi
if test -e "$ac_jpeg_libraries/libjpeg.a"; then
  LIB_JPEG="$ac_jpeg_libraries/libjpeg.a"
fi

AM_CONDITIONAL(USE_LOCAL_JPEG, test "$ac_jpeg_libraries" = "NO")

# BLT check (later in this file) needs a prebuilt libjpeg, use what we have
# since we can't use the locally built libjpeg
LIB_BLT_JPEG="$LIB_JPEG"

AC_SUBST(JPEG_CFLAGS)
AC_SUBST(JPEG_LIBS)
AC_SUBST(LIB_JPEG)
AC_SUBST(LIB_BLT_JPEG)


################################################################
# Qt
################################################################
ac_qt_includes="NO"
ac_qt_libraries="NO"
ac_qt_dir="NO"
QT_CFLAGS=""
QT_LIBS=""

AC_MSG_CHECKING(Qt directory)

AC_ARG_WITH(qt-dir,
  [  --with-qt-dir=DIR       where the root of Qt is installed.],
  [  ac_qt_includes="$withval"/include
     ac_qt_libraries="$withval"/lib
     ac_qt_dir="$withval"
  ])

if test ! "$ac_qt_includes" = "NO"; then
  AC_MSG_RESULT(Qt directory is $withval)
  QT_CFLAGS=-I$ac_qt_includes
  QTDIR=$ac_qt_dir
  AC_SUBST(QTDIR)
else
  AC_MSG_RESULT(Qt directory is not supplied. \
Not building unsupported Qt apps.)
fi
if test ! "$ac_qt_libraries" = "NO"; then
  QT_LIBS=-L$ac_qt_libraries
  # enable testing for OpenGL libs:
  need_opengl=yes
else
  QTDIR=""
  AC_SUBST(QTDIR)
fi

AM_CONDITIONAL(ENABLE_QT_APPS, test ! "x$ac_qt_libraries" = "xNO")

AC_SUBST(QT_CFLAGS)
AC_SUBST(QT_LIBS)


#################################################################
# If on a Mac, make scuba and qdec, bundles (Qt apps)
SCUBA_BUNDLE_TARGET=""
if test "x$target_vendor" = "xapple" ; then
  SCUBA_BUNDLE_TARGET="scuba_bundle"
fi
AC_SUBST(SCUBA_BUNDLE_TARGET)

QDEC_BUNDLE_TARGET=""
if test "x$target_vendor" = "xapple" ; then
  QDEC_BUNDLE_TARGET="qdec_bundle"
fi
AC_SUBST(QDEC_BUNDLE_TARGET)


################################################################
# CPPUNIT
################################################################
ac_cppunit_includes="NO"
ac_cppunit_libraries="NO"
ac_cppunit_bindir="NO"
ac_cppunit_dir="NO"
CPPUNIT_CFLAGS=""
CPPUNIT_LIBS=""
CPPUNIT_LIB=""
CPPUNIT_DIR=""

AC_MSG_CHECKING(CppUnit directory)

AC_ARG_WITH(cppunit-dir,
  [  --with-cppunit-dir=DIR  where the root of CppUnit is installed.],
  [  ac_cppunit_includes="$withval"/include
     ac_cppunit_libraries="$withval"/lib
     ac_cppunit_bindir="$withval"/bin
     ac_cppunit_dir="$withval"
  ])

if test ! "$ac_cppunit_includes" = "NO"; then
  AC_MSG_RESULT(CppUnit directory is $withval)
  CPPUNIT_CFLAGS=-I$ac_cppunit_includes
  CPPUNIT_DIR=$ac_cppunit_dir
else
  AC_MSG_RESULT(CppUnit directory is not supplied)
fi

if test ! "$ac_cppunit_libraries" = "NO"; then
  CPPUNIT_LIB=$ac_cppunit_libraries
  CPPUNIT_LIBS=-L$ac_cppunit_libraries
fi

AC_SUBST(CPPUNIT_CFLAGS)
AC_SUBST(CPPUNIT_LIBS)
AC_SUBST(CPPUNIT_LIB)
AC_SUBST(CPPUNIT_DIR)

AM_CONDITIONAL(HAVE_CPPUNIT, ! test "x$ac_cppunit_dir" = "xNO")


################################################################
# VTK
################################################################
ac_vtk_includes="NO"
ac_vtk_libraries="NO"
ac_vtk_dir="NO"
VTK_CFLAGS=""
VTK_CXXFLAGS=""
VTK_LIBS=""
VTK_LIB=""
VTK_LIB_VTK=""
VTK_DIR=""

AC_MSG_CHECKING(VTK config)

AC_ARG_WITH(vtk-dir,
  [  --with-vtk-dir=DIR      where the root of VTK is installed.],
  [  ac_vtk_includes="$withval/include"
     ac_vtk_libraries="$withval"/lib
     ac_vtk_dir="$withval"
     VTK_DIR=$ac_vtk_dir
  ])

AC_ARG_WITH(vtk-include,
  [  --with-vtk-include=DIR      root of VTK include directory.],
  [  vtk_i="$withval/include"
     ac_vtk_includes="$vtk_i"
  ])

AC_ARG_WITH(vtk-libraries,
  [  --with-vtk-libraries=DIR    root of VTK lib directory.],
  [  ac_vtk_libraries="$withval"
  ])

if test ! "$ac_vtk_includes" = "NO"; then
  AC_MSG_RESULT(VTK directory is $withval)
  if test -e $ac_vtk_includes/vtk-5.2 ; then
    ac_vtk_includes="$ac_vtk_includes/vtk-5.2"
  elif test -e $ac_vtk_includes/vtk-5.1 ; then
    ac_vtk_includes="$ac_vtk_includes/vtk-5.1"
  elif test -e $ac_vtk_includes/vtk-5.0 ; then
    ac_vtk_includes="$ac_vtk_includes/vtk-5.0"
  elif test -e $ac_vtk_includes/vtk ; then
    ac_vtk_includes="$ac_vtk_includes/vtk"
  fi
  VTK_CFLAGS="${VTK_CFLAGS} -I$ac_vtk_includes"
  VTK_CXXFLAGS="${VTK_CXXFLAGS} -I$ac_vtk_includes"
fi

if test ! "$ac_vtk_libraries" = "NO"; then
  VTK_LIBS=-L$ac_vtk_libraries
  VTK_LIB=$ac_vtk_libraries
  if test -e $ac_vtk_libraries/vtk-5.2 ; then
    VTK_LIB_VTK="$ac_vtk_libraries/vtk-5.2"
    VTK_LIBS=-L$ac_vtk_libraries/vtk-5.2
    VTK_LIB=$ac_vtk_libraries/vtk-5.2
  elif test -e $ac_vtk_libraries/vtk-5.1 ; then
    VTK_LIB_VTK="$ac_vtk_libraries/vtk-5.1"
  elif test -e $ac_vtk_libraries/vtk-5.0 ; then
    VTK_LIB_VTK="$ac_vtk_libraries/vtk-5.0"
  elif test -e $ac_vtk_libraries/vtk ; then
    VTK_LIB_VTK="$ac_vtk_libraries/vtk"
  fi
fi

AC_SUBST(VTK_CFLAGS)
AC_SUBST(VTK_CXXFLAGS)
AC_SUBST(VTK_LIBS)
AC_SUBST(VTK_LIB)
AC_SUBST(VTK_LIB_VTK)
AC_SUBST(VTK_DIR)

################################################################
# VTK for Freeview in Mac
################################################################
# This is essentially a different VTK because a Carbon build in Leopard doesn't compile when 
# TCL is on. However TCL is a requirement for other binaries. So freeview is built with separate
# VTK which has TCL turned off. 
ac_vtk_carbon_includes="NO"
ac_vtk_carbon_libraries="NO"
ac_vtk_carbon_dir="NO"
VTK_CARBON_CFLAGS=""
VTK_CARBON_CXXFLAGS=""
VTK_CARBON_LIBS=""
VTK_CARBON_LIB=""
VTK_CARBON_LIB_VTK=""
VTK_CARBON_DIR=""

AC_MSG_CHECKING(Carbon VTK config)

AC_ARG_WITH(vtk-carbon-dir,
  [  --with-vtk-carbon-dir=DIR      where the root of VTK is installed.],
  [  ac_vtk_carbon_includes="$withval/include"
     ac_vtk_carbon_libraries="$withval"/lib
     ac_vtk_carbon_dir="$withval"
     VTK_CARBON_DIR=$ac_vtk_carbon_dir
  ])

if test ! "$ac_vtk_carbon_includes" = "NO"; then
  AC_MSG_RESULT(VTK Carbon directory is $withval)
  if test -e $ac_vtk_carbon_includes/vtk-5.6 ; then
    ac_vtk_carbon_includes="$ac_vtk_carbon_includes/vtk-5.6"
  elif test -e $ac_vtk_carbon_includes/vtk-5.5 ; then
    ac_vtk_carbon_includes="$ac_vtk_carbon_includes/vtk-5.5"
  elif test -e $ac_vtk_carbon_includes/vtk-5.4 ; then
    ac_vtk_carbon_includes="$ac_vtk_carbon_includes/vtk-5.4"
  elif test -e $ac_vtk_carbon_includes/vtk-5.3 ; then
    ac_vtk_carbon_includes="$ac_vtk_carbon_includes/vtk-5.3"
  elif test -e $ac_vtk_carbon_includes/vtk-5.2 ; then
    ac_vtk_carbon_includes="$ac_vtk_carbon_includes/vtk-5.2"
  elif test -e $ac_vtk_carbon_includes/vtk-5.1 ; then
    ac_vtk_carbon_includes="$ac_vtk_carbon_includes/vtk-5.1"
  elif test -e $ac_vtk_carbon_includes/vtk-5.0 ; then
    ac_vtk_carbon_includes="$ac_vtk_carbon_includes/vtk-5.0"
  elif test -e $ac_vtk_carbon_includes/vtk ; then
    ac_vtk_carbon_includes="$ac_vtk_carbon_includes/vtk"
  fi
  VTK_CARBON_CFLAGS="${VTK_CARBON_CFLAGS} -I$ac_vtk_carbon_includes"
  VTK_CARBON_CXXFLAGS="${VTK_CARBON_CXXFLAGS} -I$ac_vtk_carbon_includes"
fi

if test ! "$ac_vtk_libraries" = "NO"; then
  VTK_CARBON_LIBS=-L$ac_vtk_carbon_libraries
  VTK_CARBON_LIB=$ac_vtk_carbon_libraries
  if test -e $ac_vtk_carbon_libraries/vtk-5.6 ; then
    VTK_CARBON_LIB_VTK="$ac_vtk_carbon_libraries/vtk-5.6"
    VTK_CARBON_LIBS=-L$ac_vtk_carbon_libraries/vtk-5.6
    VTK_CARBON_LIB=$ac_vtk_carbon_libraries/vtk-5.6
  elif test -e $ac_vtk_carbon_libraries/vtk-5.5 ; then
    VTK_CARBON_LIB_VTK="$ac_vtk_carbon_libraries/vtk-5.5"
    VTK_CARBON_LIBS=-L$ac_vtk_carbon_libraries/vtk-5.5
    VTK_CARBON_LIB=$ac_vtk_carbon_libraries/vtk-5.5
  elif test -e $ac_vtk_carbon_libraries/vtk-5.4 ; then
    VTK_CARBON_LIB_VTK="$ac_vtk_carbon_libraries/vtk-5.4"
    VTK_CARBON_LIBS=-L$ac_vtk_carbon_libraries/vtk-5.4
    VTK_CARBON_LIB=$ac_vtk_carbon_libraries/vtk-5.4
  elif test -e $ac_vtk_carbon_libraries/vtk-5.3 ; then
    VTK_CARBON_LIB_VTK="$ac_vtk_carbon_libraries/vtk-5.3"
    VTK_CARBON_LIBS=-L$ac_vtk_carbon_libraries/vtk-5.3
    VTK_CARBON_LIB=$ac_vtk_carbon_libraries/vtk-5.3
  elif test -e $ac_vtk_carbon_libraries/vtk-5.2 ; then
    VTK_CARBON_LIB_VTK="$ac_vtk_carbon_libraries/vtk-5.2"
    VTK_CARBON_LIBS=-L$ac_vtk_carbon_libraries/vtk-5.2
    VTK_CARBON_LIB=$ac_vtk_carbon_libraries/vtk-5.2
  elif test -e $ac_vtk_carbon_libraries/vtk-5.1 ; then
    VTK_CARBON_LIB_VTK="$ac_vtk_carbon_libraries/vtk-5.1"
  elif test -e $ac_vtk_carbon_libraries/vtk-5.0 ; then
    VTK_CARBON_LIB_VTK="$ac_vtk_carbon_libraries/vtk-5.0"
  elif test -e $ac_vtk_carbon_libraries/vtk ; then
    VTK_CARBON_LIB_VTK="$ac_vtk_carbon_libraries/vtk"
  fi
fi

AM_CONDITIONAL(HAVE_CARBON_VTK_LIBS, test ! "x$VTK_CARBON_DIR" = "x")

AC_SUBST(VTK_CARBON_CFLAGS)
AC_SUBST(VTK_CARBON_CXXFLAGS)
AC_SUBST(VTK_CARBON_LIBS)
AC_SUBST(VTK_CARBON_LIB)
AC_SUBST(VTK_CARBON_LIB_VTK)
AC_SUBST(VTK_CARBON_DIR)

################################################################
# ITK
################################################################
ac_itk_includes="NO"
ac_itk_libraries="NO"
ITK_CFLAGS=""
ITK_LIBS=""
ITK_LIB=""
LIBS_ITK=""
AC_MSG_CHECKING(ITK directory)

AC_ARG_WITH(itk-dir,
  [  --with-itk-dir=DIR      where the root of ITK is installed.],
  [  itk_i="$withval/include/InsightToolkit"
     ac_itk_includes="$itk_i $itk_i/Algorithms $itk_i/BasicFilters $itk_i/Common $itk_i/IO $itk_i/Numerics $itk_i/SpatialObject $itk_i/Utilities"
     ac_itk_libraries="$withval"/lib/InsightToolkit
     ITK_DIR="$withval"
     itk_apps="yes"
     AC_SUBST(ITK_DIR)
  ])

AC_ARG_WITH(itk-include,
  [  --with-itk-include=DIR      root of ITK include directory.],
  [  itk_i="$withval"
     ac_itk_includes="$itk_i"
     itk_apps="yes"
  ])

AC_ARG_WITH(itk-libraries,
  [  --with-itk-libraries=DIR    root of ITK lib directory.],
  [  ac_itk_libraries="$withval/InsightToolkit"
     itk_apps="yes"
  ])

if test ! "$ac_itk_includes" = "NO"; then
  AC_MSG_RESULT(ITK directory is $withval)
  for item in $ac_itk_includes; do
      ITK_CFLAGS="${ITK_CFLAGS} -I${item}"
  done
fi

if test ! "$ac_itk_libraries" = "NO"; then
  ITK_LIBS=-L$ac_itk_libraries
  ITK_LIB=$ac_itk_libraries
fi

AC_ARG_ENABLE(itk-apps,
 [  --enable-itk-apps       enable building ITK-based apps],
 [ itk_apps="yes"
 ])

if test "$itk_apps" = "yes"; then
  AC_MSG_RESULT([Enabled building of ITK apps.])

  # these are the minimum ITK libs necessary to support Nrrd IO:
  LIBS_ITK="$ac_itk_libraries/libITKIO.a \
  $ac_itk_libraries/libITKAlgorithms.a \
  $ac_itk_libraries/libITKCommon.a \
  $ac_itk_libraries/libITKMetaIO.a \
  $ac_itk_libraries/libITKniftiio.a \
  $ac_itk_libraries/libITKNrrdIO.a \
  $ac_itk_libraries/libitkpng.a \
  $ac_itk_libraries/libitksys.a \
  $ac_itk_libraries/libitktiff.a \
  $ac_itk_libraries/libitkv3p_netlib.a \
  $ac_itk_libraries/libitkzlib.a \
  $ac_itk_libraries/libitkgdcm.a \
  $ac_itk_libraries/libitkopenjpeg.a \
  $ac_itk_libraries/libitkjpeg8.a \
  $ac_itk_libraries/libitkjpeg12.a \
  $ac_itk_libraries/libitkjpeg16.a \
  $ac_itk_libraries/libITKDICOMParser.a"
else
  AC_MSG_RESULT([Not building ITK apps.])
fi

AM_CONDITIONAL(ENABLE_ITK_APPS, test "$itk_apps" = "yes")
AM_CONDITIONAL(HAVE_ITK_LIBS, test "$itk_apps" = "yes")

AC_SUBST(ITK_CFLAGS)
AC_SUBST(ITK_LIBS)
AC_SUBST(ITK_LIB)
AC_SUBST(LIBS_ITK)


################################################################
# eXpat - allow for explicitly specifying path
################################################################
ac_expat_includes="NO"
ac_expat_libraries="NO"
ac_expat_bindir="NO"
EXPAT_CFLAGS=""
EXPAT_LIBS=""
AC_MSG_CHECKING(Expat directory)

AC_ARG_WITH(expat-dir,
[  --with-expat-dir=DIR    where the root of Expat is installed.],
  [  ac_expat_includes="$withval"/include
     ac_expat_libraries="$withval"/lib
     ac_expat_bindir="$withval"/bin
  ])

if test ! "$ac_expat_includes" = "NO"; then
  AC_MSG_RESULT(Expat directory is $withval)
  EXPAT_CFLAGS=-I$ac_expat_includes
else
  AC_MSG_RESULT(Expat directory is not supplied)
fi
if test ! "$ac_expat_libraries" = "NO"; then
  EXPAT_LIBS=-L$ac_expat_libraries
fi

# libexpat is now used by libutils, but the shared libexpat is not found in
# the default search path on the Mac platform (it is found in /usr/X11R6/lib),
# so in the interest of full compatibility, the static libexpat is used
# if it can be found
LIB_EXPAT="-lexpat"
if test -e "$ac_expat_libraries"/libexpat.a ; then
  LIB_EXPAT="$ac_expat_libraries"/libexpat.a
else
  if test -e /usr/pubsw/packages/expat/current/lib/libexpat.a ; then
    LIB_EXPAT="/usr/pubsw/packages/expat/current/lib/libexpat.a"
  else
    if test -e /usr/X11R6/lib/libexpat.a ; then
      LIB_EXPAT="/usr/X11R6/lib/libexpat.a"
    else
      if test -e /usr/lib/libexpat.a ; then
        LIB_EXPAT="/usr/lib/libexpat.a"
      else
        if test -e /usr/lib64/libexpat.a ; then
          LIB_EXPAT="/usr/lib64/libexpat.a"
        fi
      fi
    fi
  fi
fi

AC_SUBST(EXPAT_CFLAGS)
AC_SUBST(EXPAT_LIBS)
AC_SUBST(LIB_EXPAT)


#####################################################
# OpenGL
#####################################################
AC_MSG_NOTICE(Getting OpenGL info...)

mac_gl_libs=
if test "X$with_apple_opengl_framework" = "Xyes"; then
  AC_MSG_RESULT([Using the Apple OpenGL Frameworks])
  AC_DEFINE([HAVE_APPLE_OPENGL_FRAMEWORK], [1],
           [Use the Apple OpenGL framework.])
  CPPFLAGS="$CPPFLAGS -DHAVE_APPLE_OPENGL_FRAMEWORK"
  GL_CFLAGS="-I/System/Libraries/Frameworks"
  GL_LIBS="-framework OpenGL"
  GLU_CFLAGS="-I/System/Libraries/Frameworks"
  GLU_LIBS="-framework OpenGL"
  with_apple_opengl_framework="yes"
  AC_SUBST([GL_CFLAGS])
  AC_SUBST([GL_LIBS])
  AC_SUBST([GLU_CFLAGS])
  AC_SUBST([GLU_LIBS])
  AC_SUBST(with_apple_opengl_framework)
else 
  #####
  # GL
  #####
  ac_gl_includes="NO"
  ac_gl_libraries="NO"
  ac_gl_bindir="NO"
  # these are lower-case because later AX_CHECK_GL trounces
  # GL_CLFLAGS and GL_LIBS:
  gl_cflags=""
  gl_libs=""
  AC_MSG_CHECKING(GL directory)

  AC_ARG_WITH(gl-dir,
    [  --with-gl-dir=DIR       where the root of OpenGL is installed.],
    [  ac_gl_includes="$withval"/include
       ac_gl_libraries="$withval"/lib
       ac_gl_bindir="$withval"/bin
    ])

  if test ! "$ac_gl_includes" = "NO"; then
    AC_MSG_RESULT(gl directory is $withval)
    gl_cflags=-I$ac_gl_includes
  else
    AC_MSG_RESULT(OpenGL directory is not supplied)
  fi
  if test ! "$ac_gl_libraries" = "NO"; then
    gl_libs=-L$ac_gl_libraries
  fi

  # stupid Mac OS Leopard fix:
  if test "$OS" = "Darwin"; then
    gl_libs="$gl_libs $X_LIBS -Wl,-dylib_file,\
/System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib:\
/System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib"
    mac_gl_libs=$gl_libs
  fi

  AC_SUBST(gl_cflags)
  AC_SUBST(gl_libs)
fi


#####################################################
# AX_CHECK_GL produces GL_CFLAGS GL_LIBS
ac_save_cflags=$CFLAGS
ac_save_ldflags=$LDFLAGS
CFLAGS="$gl_cflags $CFLAGS"
# bug in AX_CHECK_GL: assumes HAVE_WINDOWS_H is defined, so fix CFLAGS
CFLAGS="-DHAVE_WINDOWS_H=0 $CFLAGS"
LDFLAGS="$gl_libs $LDFLAGS"
AX_CHECK_GL
if test "X$no_gl" = "Xyes"; then
  if test "X$need_opengl" = "Xyes"; then
    AC_MSG_ERROR([FATAL: GL not found. Use --with-gl-dir=... to specify])
  else
    AC_MSG_RESULT([GL not found])
  fi
else
  AC_MSG_RESULT([GL found:
Setting GL_CFLAGS='$GL_CFLAGS $gl_cflags'
and GL_LIBS='$GL_LIBS'])
  GL_CFLAGS="$GL_CFLAGS $gl_cflags"
  LIBS_OPENGL="$LIBS_OPENGL $GL_LIBS $mac_gl_libs"
fi
CFLAGS=$ac_save_cflags
LDFLAGS=$ac_save_ldflags
#####################################################
# AX_CHECK_GLU produces GLU_CFLAGS GLU_LIBS
ac_save_cflags=$CFLAGS
ac_save_ldflags=$LDFLAGS
CFLAGS="$gl_cflags $CFLAGS"
LDFLAGS="$gl_libs $LDFLAGS"
AX_CHECK_GLU
if test "X$no_glu" = "Xyes"; then
  if test "X$need_opengl" = "Xyes"; then
    AC_MSG_ERROR([FATAL: GLu not found. Use --with-gl-dir=... to specify])
  else
    AC_MSG_RESULT([GLu not found])
  fi
else
  AC_MSG_RESULT([GLu found:
Setting GLU_CFLAGS='$GLU_CFLAGS'
and GLU_LIBS='$GLU_LIBS'])
  LIBS_OPENGL="$GLU_LIBS $mac_gl_libs"
fi
CFLAGS=$ac_save_cflags
LDFLAGS=$ac_save_ldflags

AC_SUBST(LIBS_OPENGL)

###################################################################
# Install NMR Martinos Center files (not included in distribution)
###################################################################
AC_ARG_ENABLE(nmr-install,
 [  --enable-nmr-install    install NMR Center-only files],
   [case "${enableval}" in
        yes) nmrinstall=true ;;
        no)  nmrinstall=false  ;;
        *)   AC_MSG_ERROR(bad value ${enableval} for --enable-nmr-install) ;;
    esac],
[nmrinstall=false])

if test "x$nmrinstall" = "xtrue"; then
    AC_MSG_RESULT([Performing an NMR installation.])
else
    AC_MSG_RESULT([Performing an off-site installation.])
fi

AM_CONDITIONAL(NMR_INSTALL, test x$nmrinstall = xtrue)


################################################
LIBDIRS_MGH="utils rgb unix dicom hipsstubs"
AC_SUBST(LIBDIRS_MGH)

# stupid circular dependency on iopen swapInt etc.
LIBS_MGH="\
  utils/libutils.a \
  rgb/librgb.a \
  unix/libunix.a \
  dicom/libdicom.a \
  hipsstubs/libhipsstubs.a \
  log/liblog.a"

# use local libjpeg if --with-jpeg-dir not used:
if test "$ac_jpeg_libraries" = "NO"; then
  LIB_JPEG=""
  LIBS_MGH="${LIBS_MGH} jpeg/libjpeg.a"
fi
# use local libtiff if --with-tiff-dir not used:
if test "$ac_tiff_libraries" = "NO"; then
  LIB_TIFF=""
  LIBS_MGH="${LIBS_MGH} tiff/libtiff.a"
fi

AC_SUBST(LIBS_MGH)
AC_SUBST(LIB_JPEG)
AC_SUBST(LIB_TIFF)


#####################################################
# generic mods
#####################################################
CPPFLAGS="$CPPFLAGS -D$OS -DANSI $OS_CPPFLAGS"
LDFLAGS="$LDFLAGS $OS_LDFLAGS"

#####################################################
# Checks for libraries.
# the order is important
#####################################################
# the entire libs here is passed as LIBS
# thus save the current one, along with flags, which
# are restored upon completion of these checks
ac_save_libs=$LIBS
ac_save_cppflags=$CPPFLAGS
ac_save_ldflags=$LDFLAGS
CPPFLAGS="$CPPFLAGS $TIFF_CFLAGS $JPEG_CFLAGS $PETSC_CFLAGS $ITK_CFLAGS \
$MNI_CFLAGS $TCL_CFLAGS $CPPUNIT_CFLAGS $VXL_CFLAGS $NIFTI_CFLAGS \
$GL_CFLAGS $GLU_CFLAGS $VTK_CFLAGS $KWWIDGETS_CFLAGS \
$EXPAT_CFLAGS"
LDFLAGS="$LDFLAGS $TIFF_LIBS $JPEG_LIBS $MNI_LIBS $TCL_LIBS $VXL_LIBS \
$gl_libs $GL_LIBS $GLU_LIBS $VTK_LIBS $ITK_LIBS $KWWIDGETS_LIBS \
$PETSC_LIBS $NIFTI_LIBS $XAWPLUS_LIBS $EXPAT_LIBS"
AC_MSG_NOTICE(Making sure that all libraries can be compiled...)
# AC_MSG_NOTICE(CPPFLAGS: $CPPFLAGS)
# AC_MSG_NOTICE(LDFLAGS: $LDFLAGS)
AC_CHECK_LIB([m], [floor])
AC_CHECK_LIB([z], [gzopen])
AC_CHECK_LIB([crypt], [crypt],[],[echo "(Note: Mac OS X doesn't use crypt)"])
LIB_CRYPT="-lcrypt"
if test "$OS" = "Darwin"; then
  LIB_CRYPT=""
fi
AC_SUBST(LIB_CRYPT)

# test for libtiff only if --with-tiff-dir was used:
if test ! "$ac_tiff_libraries" = "NO"; then
  CPPFLAGS="$CPPFLAGS $TIFF_CFLAGS"
  LDFLAGS="$LDFLAGS $TIFF_LIBS"
  AC_CHECK_LIB([tiff], [TIFFGetVersion],[],
    [AC_MSG_ERROR([FATAL: tiff lib not found. \
Please install tiff header files and libs.])] )
fi

# test for libjpeg only if --with-jpeg-dir was used:
if test ! "$ac_jpeg_libraries" = "NO"; then
  CPPFLAGS="$CPPFLAGS $JPEG_CFLAGS"
  LDFLAGS="$LDFLAGS $JPEG_LIBS"
  AC_CHECK_LIB([jpeg], [jpeg_start_compress],[],
    [AC_MSG_ERROR([FATAL: jpeg lib not found. Please install jpeg lib.])] )
fi

# three mni libs
AC_CHECK_LIB([netcdf], [nccreate],[],
  [AC_MSG_ERROR([FATAL: netcdf lib not found. \
Set LDFLAGS or --with-mni-dir.])] )
AC_CHECK_LIB([minc], [miopen], [],
  [AC_MSG_ERROR([FATAL: minc lib not found. \
Set LDFLAGS or --with-mni-dir.])] )
AC_CHECK_LIB([volume_io], [transform_point],[],
  [AC_MSG_ERROR([FATAL: volume_io lib not found. \
Set LDFLAGS or --with-mni-dir.])] )

# VXL check
AC_CHECK_FILE($VXL_LIB/libvnl$DYNAMIC_LIB_EXT,
  [if test "x$LD_LIBRARY_PATH" = "x"; then
     export LD_LIBRARY_PATH=$VXL_LIB
   else
     export LD_LIBRARY_PATH="$VXL_LIB":"$LD_LIBRARY_PATH"
   fi],[])
AC_CHECK_LIB([vnl], [main],[],
  [AC_MSG_ERROR([FATAL: vnl lib not found. \
Set LDFLAGS or --with-vxl-dir.])] )
AC_CHECK_LIB([vnl_algo], [main],[],
  [AC_MSG_ERROR([FATAL: vnl_algo lib not found. \
Set LDFLAGS or --with-vxl-dir.])] )

# PETSc check
if test ! "x$ac_petsc_dir" = "xNO"; then
  # if --with-petsc-dir was used, make sure necessary libs exist
  AC_CHECK_LIB([petsc -lmpiuni], [PetscInitialize],[],
    [AC_MSG_ERROR([FATAL: petsc lib not found. \
  Set LDFLAGS or --with-petsc-dir.])] )
fi

# NIfTI check
if test ! "x$ac_nifti_dir" = "xNO"; then
  # if --with-nifti-dir was used, make sure necessary libs exist
  AC_CHECK_LIB([znz], [znzread],[],
    [AC_MSG_ERROR([FATAL: NIfTI znz lib not found. \
  Set LDFLAGS or --with-nifti-dir.])] )
  AC_CHECK_LIB([niftiio -lznz], [is_nifti_file],[],
    [AC_MSG_ERROR([FATAL: niftiio lib not found. \
  Set LDFLAGS or --with-nifti-dir.])] )
  LIBS_NIFTI="-lznz -lniftiio"
else
  # check if libs installed natively somewhere
  AC_CHECK_LIB([znz], [znzread], 
    [AC_CHECK_LIB([niftiio -lznz], [is_nifti_file],
      [AM_CONDITIONAL(HAVE_NIFTI_LIBS, test "1" = "1")
       LIBS_NIFTI="-lznz -lniftiio"],[])], [])
fi
AC_SUBST(LIBS_NIFTI)

# check tcl/tk/tix/blt only if tcl/tk apps are enabled
if test ! "x$tcltk_apps" = "xNO"; then
  ################## Tcl
  # check tcl8.4
  AC_CHECK_LIB([tcl8.4],[Tcl_Init],
    [LIB_TCL=-ltcl8.4],
  # check tcl8.3
    [
      AC_CHECK_LIB([tcl8.3],[Tcl_Init],
      [LIB_TCL=-ltcl8.3],
  # check tcl83
      [
        AC_CHECK_LIB([tcl83],[Tcl_Init],
        [LIB_TCL=-ltcl83],
  # check tcl
        [ AC_CHECK_LIB([tcl],[Tcl_Init],
          [LIB_TCL=-ltcl],
  # check tclstub
          [ AC_CHECK_LIB([tclstub],[Tcl_Init],
            [LIB_TCL=-ltclstub],
            [AC_MSG_ERROR([FATAL: libtcl not found. \
Check config.log. Set LDFLAGS or --with-tcl-dir.])        ] )
          ])
        ])
      ])
    ])
  AC_SUBST(LIB_TCL)
  #################### Tk needs X11 (or Aqua)
  LIBS="$X_LIBS $LIBS"
  CPPFLAGS="$GL_CFLAGS $CPPFLAGS"
  LDFLAGS="$X_LIBS $LDFLAGS"
  # check tk8.4
  AC_CHECK_LIB([tk8.4],[Tk_Init],
    [LIB_TK=-ltk8.4],
  # check tk8.3
    [
      AC_CHECK_LIB([tk8.3],[Tk_Init],
      [LIB_TK=-ltk8.3],
  # check tk83
      [
        AC_CHECK_LIB([tk83],[Tk_Init],
        [LIB_TK=-ltk83],
  # check tk
        [
          AC_CHECK_LIB([tk],[Tk_Init],
          [LIB_TK=-ltk],
          [AC_MSG_ERROR([FATAL: libtk not found. \
Check config.log. Set LDFLAGS or --with-tcl-dir.])
          ])
        ])
      ])
    ])
  AC_SUBST(LIB_TK)
  ##################### Tix
  LIBS="$LIB_TK $LIB_TCL $LIBS"
  # check tix8.1.8.4 first, as that is known to work best with tcl/tk 8.4
  AC_CHECK_LIB([tix8.1.8.4], [Tix_Init],
  [LIB_TIX=-ltix8.1.8.4],
  [
  # check tix8.1.8.3
    AC_CHECK_LIB([tix8.1.8.3], [Tix_Init],
    [LIB_TIX=-ltix8.1.8.3],
    [
  # check tix8183
      AC_CHECK_LIB([tix8183], [Tix_Init],
      [LIB_TIX=-ltix8183],
      [
  # check tix8.4
        AC_CHECK_LIB([Tix8.4], [Tix_Init],
        [LIB_TIX=-lTix8.4],
        [
  # check tix
          AC_CHECK_LIB([tix],[Tix_Init],
            [LIB_TIX=-ltix],
            [AC_MSG_ERROR([FATAL: libtix not found. \
Check config.log. Set LDFLAGS or --with-tcl-dir.])
            ])
          ])
        ])
      ])
    ])
  AC_SUBST(LIB_TIX)
  # if test "X$with_apple_tcl_framework" = "Xyes"; then
  #   AC_CHECK_LIB([Tix8.4],[Tix_Init],[],
  #              [AC_MSG_ERROR("FATAL: libTix8.4 not found.")])

  ##################### BLT (we cannot build BLT in Aqua) must use X11
  AC_CHECK_LIB([BLT $LIB_BLT_JPEG],[Blt_Init],
    [LIB_BLT=-lBLT],
  # check BLT.2 (MacOSX)
    [
      AC_CHECK_LIB([BLT.2 $LIB_BLT_JPEG],[Blt_Init],
      [LIB_BLT=-lBLT.2],
      [
  # check BLT24 (Fedora)
        AC_CHECK_LIB([BLT24 $LIB_BLT_JPEG],[Blt_Init],
        [LIB_BLT=-lBLT24],
            [AC_MSG_ERROR([FATAL: libBLT not found. \
Check config.log. Set LDFLAGS or --with-BLT-dir.])
        ])
      ])
    ])
  AC_SUBST(LIB_BLT)
fi 

# test for vtk versions of system libs, and if not found (ie, not
# built when vtk was built), then use the system lib
AC_CHECK_LIB([vtkexpat], [main],
             [VTK_EXPAT_LIB="-lvtkexpat"],
             [AC_CHECK_LIB([expat],[main],[VTK_EXPAT_LIB="-lexpat"],
             [AC_MSG_ERROR([FATAL: libvtkexpat or libexpat not found.])])])
AC_SUBST(VTK_EXPAT_LIB)

AC_CHECK_LIB([vtkfreetype], [FTC_Manager_LookupSize],
  [VTK_FREETYPE_LIB="-lvtkfreetype"],
  [AC_CHECK_LIB([vtkfreetype], [vtk_freetype_FTC_Manager_LookupSize], [VTK_FREETYPE_LIB="-lvtkfreetype"],
    [AC_CHECK_LIB([freetype],[FTC_Manager_LookupSize],[VTK_FREETYPE_LIB="-lfreetype"],
    [AC_MSG_ERROR([FATAL: libvtkfreetype or libfreetype not found.])])])])
AC_SUBST(VTK_FREETYPE_LIB)

AC_CHECK_LIB([vtkzlib], [gzopen],
             [VTK_Z_LIB="-lvtkzlib"],
             [AC_CHECK_LIB([z],[gzopen],[VTK_Z_LIB="-lz"],
             [AC_MSG_ERROR([FATAL: libvtkzlib or libz not found.])])])
AC_SUBST(VTK_Z_LIB)

AC_CHECK_LIB([vtkjpeg], [vtk_jpeg_start_compress], 
             [VTK_JPEG_LIB="-lvtkjpeg"],
             [AC_CHECK_LIB([jpeg],[jpeg_start_compress],[VTK_JPEG_LIB="-ljpeg"],
             [AC_MSG_ERROR([FATAL: libvtkjpeg or libjpeg not found.])])])
AC_SUBST(VTK_JPEG_LIB)

AC_CHECK_LIB([vtktiff $VTK_JPEG_LIB $VTK_Z_LIB], [vtk_TIFFGetVersion],
             [VTK_TIFF_LIB="-lvtktiff"],
             [AC_CHECK_LIB([tiff],[TIFFGetVersion],[VTK_TIFF_LIB="-ltiff"],
             [AC_MSG_ERROR([FATAL: libvtktiff or libtiff not found.])])])
AC_SUBST(VTK_TIFF_LIB)

AC_CHECK_LIB([vtkpng $VTK_Z_LIB], [main],
             [VTK_PNG_LIB="-lvtkpng"],
             [AC_CHECK_LIB([png],[main],[VTK_PNG_LIB="-lpng"],
             [AC_MSG_ERROR([FATAL: libvtkpng or libpng not found.])])])
AC_SUBST(VTK_PNG_LIB)

# check for VTK libs
AC_CHECK_FILE($VTK_LIB/libvtkCommon$DYNAMIC_LIB_EXT,
  [if test "x$LD_LIBRARY_PATH" = "x"; then
     export LD_LIBRARY_PATH=$VTK_LIB
   else
     export LD_LIBRARY_PATH="$VTK_LIB":"$LD_LIBRARY_PATH"
   fi],[])
AC_CHECK_LIB([vtkCommon -lstdc++], [main],[],
  [AC_MSG_ERROR([FATAL: vtkCommon lib not found. \
Try setting LDFLAGS, LD_LIBRARY_PATH and-or --with-vtk-dir.])] )

# libverdict appeared in VTK v5.1.0, and is required by libvtkHybrid,
# and libvtkGraphics (in v5.2.0), but doesnt exist in earlier versions of VTK
VTK_VERDICT_LIB=""
AC_CHECK_LIB([verdict], [main], [VTK_VERDICT_LIB="-lverdict"], 
  [AC_CHECK_LIB([vtkverdict], [main], [VTK_VERDICT_LIB="-lvtkverdict"], [])])
AC_SUBST(VTK_VERDICT_LIB)

# ditto for libvtksqlite
VTK_SQLITE_LIB=""
AC_CHECK_LIB([vtksqlite], [main], [VTK_SQLITE_LIB="-lvtksqlite"], [])
AC_SUBST(VTK_SQLITE_LIB)

# libvtkMPEG2Encode disappeared from VTK v5.1.0, so test for it
VTK_MPEG2ENCODE_LIB=""
AC_CHECK_LIB([vtkMPEG2Encode], [main], 
                               [VTK_MPEG2ENCODE_LIB="-lvtkMPEG2Encode"], [])
AC_SUBST(VTK_MPEG2ENCODE_LIB)

# libvtkmetaio appeared in VTK v5.1.0, so check for it
# and, ugggg... it requires vtkpng and vtkzlib
VTK_METAIO_LIB=""
AC_CHECK_LIB([vtkmetaio], [main], [VTK_METAIO_LIB="-lvtkmetaio"
  AC_CHECK_LIB([vtkpng], [main], [VTK_PNG_LIB="-lvtkpng"], [])
  AC_CHECK_LIB([vtkzlib], [main], [VTK_Z_LIB="-lvtkzlib"], [])
], [])
AC_SUBST(VTK_METAIO_LIB)


# check for KWWidget libs only if kww app building is enabled
if test ! "x$kww_apps" = "xNO"; then
  LDFLAGS="$LDFLAGS $LIB_TCL"
  AC_CHECK_LIB([KWWidgets], [main],[],
    [AC_MSG_ERROR([FATAL: KWWidgets lib not found. \
  Set LDFLAGS or --with-KWWidgets-dir.])] )
fi

# check for XawPlus lib only if xawplus app building is enabled
if test ! "x$xawplus_apps" = "xNO"; then
  AC_CHECK_LIB([X11 -lXt -lXpm -lXawPlus], [XawInitializeWidgetSet],[],
    [AC_MSG_ERROR([FATAL: XawPlus lib not found. \
  Set LDFLAGS or --with-xawplus-dir.])] )
fi


###########################################################
# Intel C/C++ compiler stuff
###########################################################
LIBS_ICC=""
if test "x$CC" = "xicc"; then
  LIBS_ICC="-lirc -lsvml -lguide -limf -lpthread"
fi
AC_SUBST(LIBS_ICC)
AM_CONDITIONAL(HAVE_INTEL_COMPILER, test "x$CC" = "xicc" )


#
# recover previous settings, from prior to checks.
# let each Makefile.am set as appropriate, choose from:
# MNI_CFLAGS, MNI_LIBS
# JPEG_CFLAGS, JPEG_LIBS
# TIFF_CFLAGS, TIFF_LIBS
# TCL_CFLAGS, TCL_LIBS, LIB_TCL, ENABLE_TCLTK_APPS
# TK_CFLAGS, TK_LIBS, LIB_TK, LIB_TIX
# BLT_CFLAGS, BLT_LIBS, LIB_BLT
# GL_CFLAGS, GL_LIBS
# GLU_CFLAGS, GLU_LIBS
# VXL_CFLAGS, VXL_LIBS
# VTK_CFLAGS, VTK_LIBS
# KWWIDGETS_CFLAGS, KWWIDGETS_LIBS, ENABLE_KWWIDGETS_APPS
# ITK_CFLAGS, ITK_LIBS
LIBS=$ac_save_libs
CPPFLAGS=$ac_save_cppflags
LDFLAGS=$ac_save_ldflags

# ...or use combined flags
LDFLAGS_TCL="$BLT_LIBS $TCL_LIBS"
if test "$OS" = "Darwin"; then
  LDFLAGS_TCL="-bind_at_load $LDFLAGS_TCL"
fi
LIBS_TCL="$LIB_BLT $LIB_TIX $LIB_TK $LIB_TCL"
LIBS_TCL_OPENGL="$LIBS_TCL $LIBS_OPENGL"
AC_SUBST(LDFLAGS_TCL)
AC_SUBST(LIBS_TCL)
AC_SUBST(LIBS_TCL_OPENGL)


###########################################################
# some common flags and libs
###########################################################
CPPFLAGS="$CPPFLAGS $MNI_CFLAGS $JPEG_CFLAGS $TIFF_CFLAGS $EXPAT_CFLAGS"
LDFLAGS="$LDFLAGS $JPEG_LIBS $TIFF_LIBS $MNI_LIBS $VXL_LIBS $NIFTI_LIBS \
$ITK_LIBS $EXPAT_LIBS"
# The order is important here. When adding or removing a lib, be sure
# to test the link line to make sure you don't need to adjust the
# order.
LIBS="$LIB_EXPAT $LIB_JPEG $LIB_TIFF -lz -lm $LIB_CRYPT -ldl -lpthread $LIBS"
LIBS="$LIBS $LIBS_MNI"
LIBS="$LIBS $LIBS_VXL"
LIBS="$LIBS $LIBS_NIFTI"
LIBS="$LIBS_ITK $LIBS"
LIBS="$LIBS_ICC $LIBS "

AC_SUBST(CPPFLAGS)
AC_SUBST(LDFLAGS)
AC_SUBST(LIBS)


########################################################################
# check whether needs Itcl_Init() and Itk_Init()
# except when using Tcl8.4, which doesn't contain Itcl_Init or Itk_Init
########################################################################
if test ! "x$tcltk_apps" = "xNO"; then
  if ! test "$LIB_TCL" = "-ltcl8.4"; then
    if ! test "$LIB_TCL" = "-ltcl83"; then
      AX_TIX_INITCHECK($TCL_CFLAGS, $LDFLAGS_TCL, $LIBS_TCL)
    fi
  fi
fi


########################################################################
# Indicate whether we have OpenGL (HAVE_OPENGL is undefined if not)
########################################################################
HAVE_OPENGL="-DHAVE_OPENGL"
if test "x$GL_LIBS" = "x"; then
  HAVE_OPENGL=""
fi
AC_SUBST(HAVE_OPENGL)
AM_CONDITIONAL(HAVE_OPENGL_LIBS, ! test "X$GL_LIBS" = "X")


#########################################################################
# 'make check' environment setup
#########################################################################
#
# When 'make check' is run, the tests specified in TESTS will inherit
# these environment variable.  The first one bypasses the need for a 
# license in FREESURFER_HOME, the others specify necessary libs.
#
TESTS_ENVIRONMENT="SURFER_FRONTDOOR=1 LD_LIBRARY_PATH=$TCL_LIB"
if (! test "x$ac_cppunit_dir" = "xNO"); then
  TESTS_ENVIRONMENT="$TESTS_ENVIRONMENT:$CPPUNIT_LIB"
fi
AC_SUBST(TESTS_ENVIRONMENT)

#########################################################################
# output
#########################################################################
AC_OUTPUT([Makefile
           check_siemens_dir/Makefile
           dicom/Makefile
           distribution/Makefile
           distribution/average/Makefile
           distribution/average/surf/Makefile
           distribution/docs/Makefile
           distribution/diffusion/Makefile
           distribution/diffusion/mgh-dti-seqpack/Makefile
           distribution/fsafd/Makefile
           distribution/grad_unwarp_tables/Makefile
           distribution/lib/Makefile
           distribution/lib/bem/Makefile
           distribution/sessions/Makefile
           distribution/subjects/Makefile
           dmri_poistats/Makefile
           dmri_poistats/test/Makefile
           dmri_tensoreig/Makefile
           dngtester/Makefile
           dummy/Makefile
           fsfast/Makefile
           fsfast/bin/Makefile
           fsfast/docs/Makefile
           fsfast/toolbox/Makefile
           fsgdf/Makefile
           fslutils/Makefile
           glut/Makefile
           hiam_make_surfaces/Makefile
           hiam_register/Makefile
           hiam_make_template/Makefile
           hipsstubs/Makefile
           histo_compute_joint_density/Makefile
           histo_register_block/Makefile
           images/Makefile
           include/Makefile
           include/NrrdIO/Makefile
           include/dicom/Makefile
           include/pixrect/Makefile
           include/sys/Makefile
           include/xview/Makefile
           include/topology/Makefile
           include/fs_vnl/Makefile
           itkio/Makefile
           itkutils/Makefile
           jpeg/Makefile
           label_area/Makefile
           label2patch/Makefile
           label2flat/Makefile
           log/Makefile
           matlab/Makefile
           mkxsubjreg/Makefile
           mri_bias/Makefile
           mri_log_likelihood/Makefile
           mri_add_xform_to_header/Makefile
           mri_and/Makefile
           mri_annotation2label/Makefile
           mri_aparc2aseg/Makefile
           mri_aparc2wmseg/Makefile
           mri_apply_inu_correction/Makefile
           mri_auto_fill/Makefile
           mri_average/Makefile
           mri_dct_align/Makefile
           mri_bc_sc_bias_correct/Makefile
           mri_binarize/Makefile
           mri_build_priors/Makefile
           mri_ca_label/Makefile
           mri_ca_normalize/Makefile
           mri_ca_register/Makefile
           mri_ca_tissue_parms/Makefile
           mri_ca_train/Makefile
           mri_cc/Makefile
           mri_cht2p/Makefile
           mri_cnr/Makefile
           mri_compute_overlap/Makefile
           mri_compute_seg_overlap/Makefile
           mri_concat/Makefile
           mri_concatenate_lta/Makefile
           mri_convert/Makefile
           mri_convert_mdh/Makefile
           mri_copy_values/Makefile
           mri_cor2label/Makefile
           mri_deface/Makefile
           mri_diff/Makefile
           mri_distance_transform/Makefile
           mri_edit_segmentation/Makefile
           mri_edit_segmentation_with_surfaces/Makefile
           mri_edit_wm_with_aseg/Makefile
           mri_em_register/Makefile
           mri_estimate_tissue_parms/Makefile
           mri_evaluate_morph/Makefile
           mri_extract/Makefile
           mri_extract_conditions/Makefile
           mri_extract_label/Makefile
           mri_extract_largest_CC/Makefile
           mri_fill/Makefile
           mri_fslmat_to_lta/Makefile
           mri_fuse_segmentations/Makefile
           mri_fwhm/Makefile
           mri_gca_ambiguous/Makefile
           mri_gdfglm/Makefile
           mri_glmfit/Makefile
           mri_head/Makefile
           mri_hires_register/Makefile
           mri_histo_eq/Makefile
           mri_info/Makefile
           mri_joint_density/Makefile
           mri_label2label/Makefile
           mri_label2vol/Makefile
           mri_label_histo/Makefile
           mri_label_vals/Makefile
           mri_label_volume/Makefile
           mri_linear_register/Makefile
           mri_make_bem_surfaces/Makefile
           mri_make_density_map/Makefile
           mri_make_register/Makefile
           mri_make_template/Makefile
           mri_mark_temporal_lobe/Makefile
           mri_mask/Makefile
           mri_matrix_multiply/Makefile
           mri_mc/Makefile
           mri_mcsim/Makefile
           mri_modify/Makefile
           mri_morphology/Makefile
           mri_jacobian/Makefile
           mri_interpolate/Makefile
           mri_ms_EM/Makefile
           mri_ms_EM_with_atlas/Makefile
           mri_ms_LDA/Makefile
           mri_ms_fitparms/Makefile
           mri_nlfilter/Makefile
           mri_normalize/Makefile
           mri_normalize_tp2/Makefile
           mri_paint/Makefile
           mri_parse_sdcmdir/Makefile
           mri_parselabel/Makefile
           mri_partial_ribbon/Makefile
           mri_path2label/Makefile
           mri_polv/Makefile
           mri_probe_ima/Makefile
           mri_probedicom/Makefile
           mri_reduce/Makefile
           mri_register/Makefile
           mri_relabel_hypointensities/Makefile
           mri_remove_neck/Makefile
           mri_ribbon/Makefile
           mri_rigid_register/Makefile
           mri_robust_register/Makefile
           mri_seg_diff/Makefile
           mri_seghead/Makefile
           mri_segment/Makefile
           mri_segment_wm_damage/Makefile
           mri_segreg/Makefile
           mri_segstats/Makefile
           mri_stats2seg/Makefile
           mri_strip_nonwhite/Makefile
           mri_strip_skull/Makefile
           mri_strip_subject_info/Makefile
           mri_surf2surf/Makefile
           mri_surf2vol/Makefile
           mri_surfacemask/Makefile
           mri_surfcluster/Makefile
           mri_synthesize/Makefile
           mri_tessellate/Makefile
           mri_threshold/Makefile
           mri_topologycorrection/Makefile
           mri_train/Makefile
           mri_transform/Makefile
           mri_transform_to_COR/Makefile
           mri_twoclass/Makefile
           mri_vol2roi/Makefile
           mri_vol2surf/Makefile
           mri_vol2vol/Makefile
           mri_volcluster/Makefile
           mri_voldiff/Makefile
           mri_volsynth/Makefile
           mri_watershed/Makefile
           mri_watershed/brain_volume/Makefile
           mri_wmfilter/Makefile
           mri_xvolavg/Makefile
           mri_z2p/Makefile
           mri_label_accuracy/Makefile
           mri_multispectral_segment/Makefile
           mris2rgb/Makefile
           mris_add_template/Makefile
           mris_aseg_distance/Makefile
           mris_density/Makefile
           mris_fill/Makefile
           mris_fbirn_annot/Makefile
           mris_anatomical_stats/Makefile
           mris_annot_to_segmentation/Makefile
           mris_average_curvature/Makefile
           mris_ca_label/Makefile
           mris_calc/Makefile
           mris_divide_parcellation/Makefile
           mris_ca_train/Makefile
           mris_classify_thickness/Makefile
           mris_compute_acorr/Makefile
           mris_compute_lgi/Makefile
           mris_compute_overlap/Makefile
           mris_compute_parc_overlap/Makefile
           mris_convert/Makefile
           mris_distance_map/Makefile
           mris_curvature/Makefile
           mris_curvature_stats/Makefile
           mris_diff/Makefile
           mris_distance_to_label/Makefile
           mris_entropy/Makefile
           mris_errors/Makefile
           mris_euler_number/Makefile
           mris_expand/Makefile
           mris_find_flat_regions/Makefile
           mris_fix_topology/Makefile
           mris_topo_fixer/Makefile
           mris_flatten/Makefile
           mris_fwhm/Makefile
           mris_glm/Makefile
           mris_inflate/Makefile
           mris_info/Makefile
           mris_jacobian/Makefile
           mris_label_area/Makefile
           mris_label_mode/Makefile
           mris_label2annot/Makefile
           mris_make_average_surface/Makefile
           mris_make_surfaces/Makefile
           mris_make_template/Makefile
           mris_morph_stats/Makefile
           mris_deform/Makefile
           mris_ms_refine/Makefile
           mris_ms_surface_CNR/Makefile
           mris_multiscale_stats/Makefile
           mris_niters2fwhm/Makefile
           mris_register/Makefile
           mris_remove_variance/Makefile
           mris_rescale/Makefile
           mris_reverse/Makefile
           mris_rotate/Makefile
           mris_sample_label/Makefile
           mris_sample_parc/Makefile
           mris_segment_vals/Makefile
           mris_seg2annot/Makefile
           mris_shrinkwrap/Makefile
           mris_show/Makefile
           mris_smooth/Makefile
           mris_sphere/Makefile
           mris_spherical_average/Makefile
           mris_average_parcellation/Makefile
           mris_surface_stats/Makefile
           mris_surface_to_vol_distances/Makefile
           mris_talairach/Makefile
           mris_thickness/Makefile
           mris_compute_optimal_kernel/Makefile
           mris_thickness_comparison/Makefile
           mris_thickness_diff/Makefile
           mris_transform/Makefile
           mris_translate_annotation/Makefile
           mris_twoclass/Makefile
           mris_volume/Makefile
           mris_volmask/Makefile
           mris_w_to_curv/Makefile
           mrisp_paint/Makefile
           mris_longitudinal_surfaces/Makefile
           nmovie/Makefile
           optseq2/Makefile
           orient_mri/Makefile
           qdec/Makefile
           qdec_glmfit/Makefile
           qdecproject/Makefile
           rbftest/Makefile
           regdat2xfm/Makefile
           repair_siemens_file/Makefile
           rgb/Makefile
           scripts/Makefile
           scuba/Makefile
           scuba2/Makefile
           freeview/Makefile
           spherical_stats/Makefile
           stat_normalize/Makefile
           stim/Makefile
           stim_polar/Makefile
           svm-lib/Makefile
           talairach_afd/Makefile
           talairach_avi/Makefile
           test_makevol/Makefile
           test_window_env/Makefile
           tetgen/Makefile
           tiff/Makefile
           tkmedit/Makefile
           tkregister2/Makefile
           tkregister2/cmdl/Makefile
           tksurfer/Makefile
           tridec/Makefile
           unix/Makefile
           utils/cephes/Makefile
           utils/Makefile
           utils/NrrdIO/Makefile
           utils/test/Makefile
           utils/test/mrishash/Makefile
           utilscpp/Makefile
           utilscpp/test/Makefile
           vtkfsio/Makefile
           vtkutils/Makefile])

########################################################################
builddir=`pwd`
AC_MSG_RESULT(
[
FreeSurfer is now configured for ${host}

  Source directory:  ${srcdir}
  Build directory:   ${builddir}
  Install directory: ${prefix}

  C compiler:   ${CC} ${CPPFLAGS} ${CFLAGS}
  C++ compiler: ${CXX} ${CPPFLAGS} ${CXXFLAGS}
  Linker:       ${LD} ${LDFLAGS}
  Libs:         ${LIBS}
])

